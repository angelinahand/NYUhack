{"ast":null,"code":"import * as e from \"react\";\nexport function useSize(r) {\n  const [i, t] = e.useState(void 0);\n  return e.useEffect(() => {\n    if (r) {\n      const e = new ResizeObserver(e => {\n        if (!Array.isArray(e)) return;\n        if (!e.length) return;\n        const i = e[0];\n        let o, n;\n\n        if (\"borderBoxSize\" in i) {\n          const e = i.borderBoxSize,\n                r = Array.isArray(e) ? e[0] : e;\n          o = r.inlineSize, n = r.blockSize;\n        } else {\n          const e = r.getBoundingClientRect();\n          o = e.width, n = e.height;\n        }\n\n        t({\n          width: o,\n          height: n\n        });\n      });\n      return e.observe(r, {\n        box: \"border-box\"\n      }), () => {\n        t(void 0), e.unobserve(r);\n      };\n    }\n  }, [r]), i;\n}","map":{"version":3,"mappings":";OAIA,SAASA,OAAT,CAAiBC,CAAjB,EAAiBA;AACf,SAAOC,CAAP,EAAaC,CAAb,IAAwBC,EAAMC,QAAND,CAAMC,KAAwDC,CAA9DF,CAAxB;AA8CA,SA5CAA,EAAMG,SAANH,CAAgB;AACd,QAAIH,CAAJ,EAAa;AACX,YAAMO,IAAiB,IAAIC,cAAJ,CAAoBC;AACzC,aAAKC,MAAMC,OAAND,CAAcD,CAAdC,CAAL,EACE;AAKF,aAAKD,EAAQG,MAAb,EACE;AAGF,cAAMC,IAAQJ,EAAQ,CAARA,CAAd;AACA,YAAIK,CAAJ,EACIC,CADJ;;AAGA,YAAI,mBAAmBF,CAAvB,EAA8B;AAC5B,gBAAMG,IAAkBH,EAAKI,aAA7B;AAAA,gBAEMC,IAAaR,MAAMC,OAAND,CAAcM,CAAdN,IAAiCM,EAAgB,CAAhBA,CAAjCN,GAAsDM,CAFzE;AAGAF,cAAQI,EAAUC,UAAlBL,EACAC,IAASG,EAAUE,SADnBN;AACmB,SALrB,MAMO;AAGL,gBAAMO,IAAOrB,EAAQsB,qBAARtB,EAAb;AACAc,cAAQO,EAAKP,KAAbA,EACAC,IAASM,EAAKN,MADdD;AAIFZ;;AAAAA,UAAQ;AAAEY,kBAAF;AAASC;AAAT,SAARb;AAAiBa,OA7BI,CAAvB;AAkCA,aAFAR,EAAegB,OAAfhB,CAAuBP,CAAvBO,EAAgC;AAAEiB,aAAK;AAAP,OAAhCjB,GAEO;AACLL,eAAQG,CAARH,GACAK,EAAekB,SAAflB,CAAyBP,CAAzBO,CADAL;AACyBF,OAF3B;AAE2BA;AAAAA,GAtC/BG,EA0CG,CAACH,CAAD,CA1CHG,GA4COF,CAAP;AAAOA","names":["useSize","element","size","setSize","React","useState","undefined","useEffect","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","width","height","borderSizeEntry","borderBoxSize","borderSize","inlineSize","blockSize","rect","getBoundingClientRect","observe","box","unobserve"],"sources":["/Users/angelinadeo/thehacktrical/NYUhack/node_modules/@radix-ui/react-use-size/dist/packages/react/use-size/src/useSize.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(element: HTMLElement | SVGElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (element) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = element.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => {\n        setSize(undefined);\n        resizeObserver.unobserve(element);\n      };\n    }\n    return;\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"]},"metadata":{},"sourceType":"module"}