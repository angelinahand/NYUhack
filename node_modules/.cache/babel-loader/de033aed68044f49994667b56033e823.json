{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport * as o from \"@radix-ui/react-menu\";\nimport { createMenuScope as n } from \"@radix-ui/react-menu\";\nimport { Primitive as r } from \"@radix-ui/react-primitive\";\nimport { useControllableState as t } from \"@radix-ui/react-use-controllable-state\";\nimport { createContextScope as p } from \"@radix-ui/react-context\";\nimport { composeRefs as a } from \"@radix-ui/react-compose-refs\";\nimport { composeEventHandlers as c } from \"@radix-ui/primitive\";\nimport * as d from \"react\";\nimport u from \"@babel/runtime/helpers/esm/extends\";\nconst [s, i] = p(\"DropdownMenu\", [n]);\nexport { i as createDropdownMenuScope };\nconst l = n(),\n      [m, w] = s(\"DropdownMenu\");\nexport const DropdownMenu = e => {\n  const {\n    __scopeDropdownMenu: n,\n    children: r,\n    open: p,\n    defaultOpen: a,\n    onOpenChange: c\n  } = e,\n        s = M(\"DropdownMenu\", n),\n        i = l(n),\n        [w = !1, D] = t({\n    prop: p,\n    defaultProp: a,\n    onChange: c\n  }),\n        g = d.useCallback(() => D(e => !e), [D]);\n  return s.isInsideContent ? /*#__PURE__*/d.createElement(m, {\n    scope: n,\n    isRootMenu: !1,\n    open: w,\n    onOpenChange: D,\n    onOpenToggle: g\n  }, /*#__PURE__*/d.createElement(o.Sub, u({}, i, {\n    open: w,\n    onOpenChange: D\n  }), r)) : /*#__PURE__*/d.createElement(f, u({}, e, {\n    open: w,\n    onOpenChange: D,\n    onOpenToggle: g\n  }), r);\n};\n/*#__PURE__*/\n\nconst f = n => {\n  const {\n    __scopeDropdownMenu: r,\n    children: t,\n    dir: p,\n    open: a,\n    onOpenChange: c,\n    onOpenToggle: s,\n    modal: i = !0\n  } = n,\n        w = l(r),\n        f = d.useRef(null);\n  /*#__PURE__*/\n\n  return d.createElement(m, {\n    scope: r,\n    isRootMenu: !0,\n    triggerId: e(),\n    triggerRef: f,\n    contentId: e(),\n    open: a,\n    onOpenChange: c,\n    onOpenToggle: s,\n    modal: i\n  }, /*#__PURE__*/d.createElement(o.Root, u({}, w, {\n    open: a,\n    onOpenChange: c,\n    dir: p,\n    modal: i\n  }), t));\n};\n\nexport const DropdownMenuTrigger = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: t,\n    ...p\n  } = e,\n        s = w(\"DropdownMenuTrigger\", t),\n        i = l(t);\n  return s.isRootMenu ? /*#__PURE__*/d.createElement(o.Anchor, u({\n    asChild: !0\n  }, i), /*#__PURE__*/d.createElement(r.button, u({\n    type: \"button\",\n    id: s.triggerId,\n    \"aria-haspopup\": \"menu\",\n    \"aria-expanded\": !!s.open || void 0,\n    \"aria-controls\": s.open ? s.contentId : void 0,\n    \"data-state\": s.open ? \"open\" : \"closed\"\n  }, p, {\n    ref: a(n, s.triggerRef),\n    onPointerDown: c(e.onPointerDown, e => {\n      0 === e.button && !1 === e.ctrlKey && (s.open || e.preventDefault(), s.onOpenToggle());\n    }),\n    onKeyDown: c(e.onKeyDown, e => {\n      [\" \", \"Enter\", \"ArrowDown\"].includes(e.key) && (e.preventDefault(), s.onOpenChange(!0));\n    })\n  }))) : null;\n});\n/*#__PURE__*/\n\nconst [D, M] = s(\"DropdownMenuContent\", {\n  isInsideContent: !1\n});\nexport const DropdownMenuContent = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = w(\"DropdownMenuContent\", r),\n        a = l(r),\n        c = { ...t,\n    style: { ...e.style,\n      \"--radix-dropdown-menu-content-transform-origin\": \"var(--radix-popper-transform-origin)\"\n    }\n  };\n  /*#__PURE__*/\n\n  return d.createElement(D, {\n    scope: r,\n    isInsideContent: !0\n  }, p.isRootMenu ? /*#__PURE__*/d.createElement(g, u({\n    __scopeDropdownMenu: r\n  }, c, {\n    ref: n\n  })) : /*#__PURE__*/d.createElement(o.Content, u({}, a, c, {\n    ref: n\n  })));\n});\n/*#__PURE__*/\n\nconst g = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    portalled: t = !0,\n    ...p\n  } = e,\n        a = w(\"DropdownMenuContent\", r),\n        c = l(r),\n        s = d.useRef(!1);\n  return a.isRootMenu ? /*#__PURE__*/d.createElement(o.Content, u({\n    id: a.contentId,\n    \"aria-labelledby\": a.triggerId\n  }, c, p, {\n    ref: n,\n    portalled: t,\n    onCloseAutoFocus: o => {\n      var n, r;\n      (null === (n = e.onCloseAutoFocus) || void 0 === n || n.call(e, o), o.defaultPrevented) || (s.current || null === (r = a.triggerRef.current) || void 0 === r || r.focus(), o.preventDefault());\n      s.current = !1;\n    },\n    onInteractOutside: o => {\n      var n, r;\n\n      if (null === (n = e.onInteractOutside) || void 0 === n || n.call(e, o), !o.defaultPrevented) {\n        const e = o.detail.originalEvent,\n              n = 0 === e.button && !0 === e.ctrlKey,\n              r = 2 === e.button || n;\n        a.modal && !r || (s.current = !0);\n      }\n\n      const t = o.target;\n      (null === (r = a.triggerRef.current) || void 0 === r ? void 0 : r.contains(t)) && o.preventDefault();\n    }\n  })) : null;\n});\nexport const DropdownMenuGroup = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.Group, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const DropdownMenuLabel = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.Label, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const DropdownMenuItem = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.Item, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const DropdownMenuTriggerItem = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.SubTrigger, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const DropdownMenuCheckboxItem = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.CheckboxItem, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const DropdownMenuRadioGroup = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.RadioGroup, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const DropdownMenuRadioItem = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.RadioItem, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const DropdownMenuItemIndicator = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.ItemIndicator, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const DropdownMenuSeparator = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.Separator, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const DropdownMenuArrow = /*#__PURE__*/d.forwardRef((e, n) => {\n  const {\n    __scopeDropdownMenu: r,\n    ...t\n  } = e,\n        p = l(r);\n  /*#__PURE__*/\n\n  return d.createElement(o.Arrow, u({}, p, t, {\n    ref: n\n  }));\n});\n/*#__PURE__*/\n\nexport const Root = DropdownMenu;\nexport const Trigger = DropdownMenuTrigger;\nexport const Content = DropdownMenuContent;\nexport const Group = DropdownMenuGroup;\nexport const Label = DropdownMenuLabel;\nexport const Item = DropdownMenuItem;\nexport const TriggerItem = DropdownMenuTriggerItem;\nexport const CheckboxItem = DropdownMenuCheckboxItem;\nexport const RadioGroup = DropdownMenuRadioGroup;\nexport const RadioItem = DropdownMenuRadioItem;\nexport const ItemIndicator = DropdownMenuItemIndicator;\nexport const Separator = DropdownMenuSeparator;\nexport const Arrow = DropdownMenuArrow;","map":{"version":3,"mappings":";;;;;;;;;;AAmBA,OAGOA,CAHP,EAGkCC,CAHlC,IAG6DC,EAHlC,cAGkCA,EAE3D,CAACC,CAAD,CAF2DD,CAH7D;AAKGC;AAEH,MAAMC,IAAeD,GAArB;AAAA,MAAqBA,CAoBdE,CApBcF,EAoBQG,CApBRH,IAoBkCH,EA3B5B,cA2B4BA,CApBvD;AAP2B,OAwC3B,MAAMO,eAA6CC;AACjD;AAAMC,yBAAEA,CAAR;AAAMC,cAAuBA,CAA7B;AAAuCC,UAAMC,CAA7C;AAAMC,iBAAiDA,CAAvD;AAAMC,kBAA8DA;AAApE,MAAqFN,CAArF;AAAA,QACMO,IAAiBC,EA1CE,cA0CFA,EAAsCP,CAAtCO,CADvB;AAAA,QAEMC,IAAYb,EAAaK,CAAbL,CAFlB;AAAA,QAE+BK,CACxBE,KAAO,CADiBF,EACVS,CADUT,IACCU,EAAqB;AACnDC,UAAMR,CAD6C;AAEnDS,iBAAaR,CAFsC;AAGnDS,cAAUR;AAHyC,GAArBK,CAHhC;AAAA,QASMI,IAAmBC,EAAMC,WAAND,CAAkB,MAAMN,EAASQ,MAAcA,CAAvBR,CAAxBM,EAA0D,CAACN,CAAD,CAA1DM,CATzB;AAWA,SAAOT,EAAeY,eAAfZ,GAAeY,aACpBC,gBAACC,CAADD;AACEE,WAAOrB,CADT;AAEEsB,iBAAY,CAFd;AAGEpB,UAAMA,CAHR;AAIEG,kBAAcI,CAJhB;AAKEc,kBAAcT;AALhB,KAKgBA,aAEdK,gBAACK,EAAcC,GAAfN,QAAuBX,CAAvBkB;AAAkCxB,UAAMA,CAAxC;AAA8CG,kBAAcI;AAA5D,MACGR,CADHkB,CAPFA,CADKb,GASAL,aAILkB,gBAACQ,CAADR,QAAsBpB,CAAtB2B;AAA6BxB,UAAMA,CAAnC;AAAyCG,kBAAcI,CAAvD;AAAgEc,kBAAcT;AAA9E,MACGb,CADHkB,CAbF;AAcKlB,CA1BP;AA0BOA;;AAkBP,MAAM2B,IACJ7B;AAEA;AAAMC,yBACJA,CADF;AAAMC,cAEJA,CAFF;AAAM4B,SAGJA,CAHF;AAAM3B,UAIJA,CAJF;AAAMG,kBAKJA,CALF;AAAMkB,kBAMJA,CANF;AAAMO,WAOJA,KAAQ;AAPV,MAQI/B,CARJ;AAAA,QASMS,IAAYb,EAAaK,CAAbL,CATlB;AAAA,QAUMoC,IAAahB,EAAMiB,MAANjB,CAAgC,IAAhCA,CAVnB;AAUmD;;AACnD,SACEI,gBAACC,CAADD;AACEE,WAAOrB,CADT;AAEEsB,iBAAY,CAFd;AAGEW,eAAWC,GAHb;AAIEH,gBAAYA,CAJd;AAKEI,eAAWD,GALb;AAMEhC,UAAMA,CANR;AAOEG,kBAAcA,CAPhB;AAQEkB,kBAAcA,CARhB;AASEO,WAAOA;AATT,KASSA,aAEPX,gBAACK,EAAcY,IAAfjB,QACMX,CADNkB;AAEExB,UAAMA,CAFR;AAGEG,kBAAcA,CAHhB;AAIEwB,SAAKA,CAJP;AAKEC,WAAOA;AALT,MAOG7B,CAPHkB,CAXFA,CADF;AAmBOlB,CAjCT;;AAiCSA,OAgBT,MAAMoC,mCAAsBtB,EAAMuB,UAANvB,CAC1B,CAAChB,CAAD,EAA+CwC,CAA/C,KAA+CA;AAC7C;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwBwC;AAAhC,MAAiDzC,CAAjD;AAAA,QACM0C,IAAU5C,EATC,qBASDA,EAAqCG,CAArCH,CADhB;AAAA,QAEMW,IAAYb,EAAaK,CAAbL,CAFlB;AAGA,SAAO8C,EAAQnB,UAARmB,GAAQnB,aACbH,gBAACK,EAAckB,MAAfvB;AAAsBwB,cAAO;AAA7B,KAAkCnC,CAAlCkB,GAAkClB,aAChCW,gBAACyB,EAAUC,MAAX1B;AACE2B,UAAK,QADP;AAEEC,QAAIN,EAAQR,SAFd;AAGE,qBAAc,MAHhB;AAIE,uBAAeQ,EAAQvC,IAAvB,IAAuBA,KAAc8C,CAJvC;AAKE,qBAAeP,EAAQvC,IAARuC,GAAeA,EAAQN,SAAvBM,GAAuBN,KAAYa,CALpD;AAME,kBAAYP,EAAQvC,IAARuC,GAAe,MAAfA,GAAwB;AANtC,KAOMD,CAPNd;AAQEuB,SAAKC,EAAYX,CAAZW,EAA0BT,EAAQV,UAAlCmB,CARP;AASEC,mBAAeC,EAAqBrD,EAAMoD,aAA3BC,EAA2CC;AAGnC,YAAjBA,EAAMR,MAAW,IAAXA,CAAkC,CAAlCA,KAAgBQ,EAAMC,OAAX,KAGdb,EAAQvC,IAARuC,IAAcY,EAAME,cAANF,EAAdZ,EACLA,EAAQlB,YAARkB,EAJmB;AAIXlB,KAPG6B,CATjB;AAmBEI,eAAWJ,EAAqBrD,EAAMyD,SAA3BJ,EAAuCC;AAC5C,OAAC,GAAD,EAAM,OAAN,EAAe,WAAf,EAA4BI,QAA5B,CAAqCJ,EAAMK,GAA3C,MACFL,EAAME,cAANF,IACAZ,EAAQpC,YAARoC,CAAQpC,CAAa,CAArBoC,CAFE;AAEmB,KAHdW;AAnBb,KADFjC,CADKsB,GA6BH,IA7BJ;AA6BI,CAlCoB1B,CAA5B;AAkCQ;;AAUR,OAEO4C,CAFP,EAEwBpD,CAFxB,IAE6ChB,EAFxB,qBAEwBA,EAAwC;AACnF2B,oBAAiB;AADkE,CAAxC3B,CAF7C;AAGmB,OASnB,MAAMqE,mCAAsB7C,EAAMuB,UAANvB,CAC1B,CAAChB,CAAD,EAA+CwC,CAA/C,KAA+CA;AAC7C;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwB6D;AAAhC,MAAiD9D,CAAjD;AAAA,QACM0C,IAAU5C,EAfC,qBAeDA,EAAqCG,CAArCH,CADhB;AAAA,QAEMW,IAAYb,EAAaK,CAAbL,CAFlB;AAAA,QAGMmE,IAAc,KACfD,CADe;AAElBE,WAAO,KACFhE,EAAMgE,KADJ;AAGL,wDACE;AAJG;AAFW,GAHpB;AASM;;AAIN,SACE5C,gBAAC6C,CAAD7C;AAAiBE,WAAOrB,CAAxB;AAA6CkB,sBAAiB;AAA9D,KACGuB,EAAQnB,UAARmB,GAAQnB,aACPH,gBAAC8C,CAAD9C;AACEnB,yBAAqBA;AADvB,KAEM8D,CAFNpC;AAGEuB,SAAKV;AAHP,KADDE,GAIQF,aAGPpB,gBAACK,EAAc0C,OAAf/C,QAA2BX,CAA3BkB,EAA0CoC,CAA1CpC;AAAuDuB,SAAKV;AAA5D,KARJpB,CADF;AASkEoB,CAxB1CxB,CAA5B;AAwBsEwB;;AActE,MAAM4B,iBAA0BpD,EAAMuB,UAANvB,CAG9B,CAAChB,CAAD,EAAQwC,CAAR,KAAQA;AACR;AAAMvC,yBAAEA,CAAR;AAAMoE,eAAuBA,KAAY,CAAzC;AAAyC,OAASP;AAAlD,MAAmE9D,CAAnE;AAAA,QACM0C,IAAU5C,EAvDG,qBAuDHA,EAAqCG,CAArCH,CADhB;AAAA,QAEMW,IAAYb,EAAaK,CAAbL,CAFlB;AAAA,QAGM0E,IAA0BtD,EAAMiB,MAANjB,CAAMiB,CAAO,CAAbjB,CAHhC;AAKA,SAAO0B,EAAQnB,UAARmB,GAAQnB,aACbH,gBAACK,EAAc0C,OAAf/C;AACE4B,QAAIN,EAAQN,SADd;AAEE,uBAAiBM,EAAQR;AAF3B,KAGMzB,CAHNkB,EAIMmC,CAJNnC;AAKEuB,SAAKV,CALP;AAME6B,eAAWA,CANb;AAOEE,sBAAmBjB;AAAU,aAGEkB,CAHF;AAGEA,OAF7B,gBAAMD,gBAAN,KAAMA,KAAN,CAAMA,KAANE,eAAyBnB,CAAzBmB,GAEKnB,EAAMoB,gBAAkBF,MACtBF,EAAwBK,OAAxBL,IAAiC,gBAAQtC,UAARU,CAAmBiC,OAAnB,CAAjCL,IAAoDK,KAAnB,CAAmBA,KAAnBH,CAAjCF,IAAiCE,EAA4BI,KAA5BJ,EAAjCF,EAELhB,EAAME,cAANF,EAH2BkB;AAM7BF,QAAwBK,OAAxBL,GAAwBK,CAAU,CAAlCL;AAAkC,KAhBtC;AAkBEO,uBAAoBvB;AAAU;;AAG5B,UAFA,gBAAMuB,iBAAN,KAAMA,KAAN,CAAMA,KAANC,eAA0BxB,CAA1BwB,GAA0BxB,CAErBA,EAAMoB,gBAAX,EAA6B;AAC3B,cAAMK,IAAgBzB,EAAM0B,MAAN1B,CAAayB,aAAnC;AAAA,cACME,IAAyC,MAAzBF,EAAcjC,MAAW,IAAXA,CAA0C,CAA1CA,KAAgBiC,EAAcxB,OADlE;AAAA,cAEM2B,IAAwC,MAAzBH,EAAcjC,MAAW,IAAKmC,CAFnD;AAIKvC,UAAQX,KAARW,IAAQX,CAASmD,CAAjBxC,KAA+B4B,EAAwBK,OAAxBL,GAAwBK,CAAU,CAAjEjC;AASP;;AAAA,YAAMyC,IAAS7B,EAAM6B,MAArB;AAAqBA,OACA,cAAGzC,EAAQV,UAARU,CAAmBiC,OAAtB,KAAsBA,KAAtB,CAAsBA,KAAtBS,aAAGA,EAA4BC,QAA5BD,CAAqCD,CAArCC,CADHD,KAEA7B,EAAME,cAANF,EAFA6B;AAEM3B;AArC/B,KADKd,GAyCH,IAzCJ;AAyCI,CAlD0B1B,CAAhC;AAkDM,OAaN,MAAMsE,iCAAoBtE,EAAMuB,UAANvB,CACxB,CAAChB,CAAD,EAA6CwC,CAA7C,KAA6CA;AAC3C;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwBsF;AAAhC,MAA+CvF,CAA/C;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAc+D,KAAfpE,QAAyBX,CAAzBkB,EAAwC4D,CAAxC5D;AAAoDuB,SAAKV;AAAzD,KAAP;AAAgEA,CAJ1CxB,CAA1B;AAIoEwB;;AAAAA,OAgBpE,MAAMiD,iCAAoBzE,EAAMuB,UAANvB,CACxB,CAAChB,CAAD,EAA6CwC,CAA7C,KAA6CA;AAC3C;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwByF;AAAhC,MAA+C1F,CAA/C;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAckE,KAAfvE,QAAyBX,CAAzBkB,EAAwC+D,CAAxC/D;AAAoDuB,SAAKV;AAAzD,KAAP;AAAgEA,CAJ1CxB,CAA1B;AAIoEwB;;AAAAA,OAgBpE,MAAMoD,gCAAmB5E,EAAMuB,UAANvB,CACvB,CAAChB,CAAD,EAA4CwC,CAA5C,KAA4CA;AAC1C;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwB4F;AAAhC,MAA8C7F,CAA9C;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAcqE,IAAf1E,QAAwBX,CAAxBkB,EAAuCkE,CAAvClE;AAAkDuB,SAAKV;AAAvD,KAAP;AAA8DA,CAJzCxB,CAAzB;AAIkEwB;;AAAAA,OAgBlE,MAAMuD,uCAA0B/E,EAAMuB,UAANvB,CAG9B,CAAChB,CAAD,EAAmDwC,CAAnD,KAAmDA;AACnD;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwB+F;AAAhC,MAAqDhG,CAArD;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAcwE,UAAf7E,QAA8BX,CAA9BkB,EAA6CqE,CAA7CrE;AAA+DuB,SAAKV;AAApE,KAAP;AAA2EA,CAN7CxB,CAAhC;AAM6EwB;;AAAAA,OAe7E,MAAM0D,wCAA2BlF,EAAMuB,UAANvB,CAG/B,CAAChB,CAAD,EAAoDwC,CAApD,KAAoDA;AACpD;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwBkG;AAAhC,MAAsDnG,CAAtD;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAc2E,YAAfhF,QAAgCX,CAAhCkB,EAA+CwE,CAA/CxE;AAAkEuB,SAAKV;AAAvE,KAAP;AAA8EA,CAN/CxB,CAAjC;AAMgFwB;;AAAAA,OAehF,MAAM6D,sCAAyBrF,EAAMuB,UAANvB,CAG7B,CAAChB,CAAD,EAAkDwC,CAAlD,KAAkDA;AAClD;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwBqG;AAAhC,MAAoDtG,CAApD;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAc8E,UAAfnF,QAA8BX,CAA9BkB,EAA6C2E,CAA7C3E;AAA8DuB,SAAKV;AAAnE,KAAP;AAA0EA,CAN7CxB,CAA/B;AAM4EwB;;AAAAA,OAe5E,MAAMgE,qCAAwBxF,EAAMuB,UAANvB,CAG5B,CAAChB,CAAD,EAAiDwC,CAAjD,KAAiDA;AACjD;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwBwG;AAAhC,MAAmDzG,CAAnD;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAciF,SAAftF,QAA6BX,CAA7BkB,EAA4C8E,CAA5C9E;AAA4DuB,SAAKV;AAAjE,KAAP;AAAwEA,CAN5CxB,CAA9B;AAM0EwB;;AAAAA,OAe1E,MAAMmE,yCAA4B3F,EAAMuB,UAANvB,CAGhC,CAAChB,CAAD,EAAqDwC,CAArD,KAAqDA;AACrD;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwB2G;AAAhC,MAAuD5G,CAAvD;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAcoF,aAAfzF,QAAiCX,CAAjCkB,EAAgDiF,CAAhDjF;AAAoEuB,SAAKV;AAAzE,KAAP;AAAgFA,CANhDxB,CAAlC;AAMkFwB;;AAAAA,OAelF,MAAMsE,qCAAwB9F,EAAMuB,UAANvB,CAG5B,CAAChB,CAAD,EAAiDwC,CAAjD,KAAiDA;AACjD;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwB8G;AAAhC,MAAmD/G,CAAnD;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAcuF,SAAf5F,QAA6BX,CAA7BkB,EAA4CoF,CAA5CpF;AAA4DuB,SAAKV;AAAjE,KAAP;AAAwEA,CAN5CxB,CAA9B;AAM0EwB;;AAAAA,OAe1E,MAAMyE,iCAAoBjG,EAAMuB,UAANvB,CACxB,CAAChB,CAAD,EAA6CwC,CAA7C,KAA6CA;AAC3C;AAAMvC,yBAAEA,CAAR;AAAQA,OAAwBiH;AAAhC,MAA+ClH,CAA/C;AAAA,QACMS,IAAYb,EAAaK,CAAbL,CADlB;AAC+BK;;AAC/B,SAAOmB,gBAACK,EAAc0F,KAAf/F,QAAyBX,CAAzBkB,EAAwCuF,CAAxCvF;AAAoDuB,SAAKV;AAAzD,KAAP;AAAgEA,CAJ1CxB,CAA1B;AAIoEwB;;AAAAA,OAQpE,MAAMH,OAAOtC,YAAb;AAAaA,OACb,MAAMqH,UAAU9E,mBAAhB;AAAgBA,OAChB,MAAM6B,UAAUN,mBAAhB;AAAgBA,OAChB,MAAM2B,QAAQF,iBAAd;AAAcA,OACd,MAAMK,QAAQF,iBAAd;AAAcA,OACd,MAAMK,OAAOF,gBAAb;AAAaA,OACb,MAAMyB,cAActB,uBAApB;AAAoBA,OACpB,MAAMK,eAAeF,wBAArB;AAAqBA,OACrB,MAAMK,aAAaF,sBAAnB;AAAmBA,OACnB,MAAMK,YAAYF,qBAAlB;AAAkBA,OAClB,MAAMK,gBAAgBF,yBAAtB;AAAsBA,OACtB,MAAMK,YAAYF,qBAAlB;AAAkBA,OAClB,MAAMK,QAAQF,iBAAd","names":["createDropdownMenuContext","createDropdownMenuScope","createContextScope","createMenuScope","useMenuScope","DropdownMenuProvider","useDropdownMenuContext","DropdownMenu","props","__scopeDropdownMenu","children","open","openProp","defaultOpen","onOpenChange","contentContext","useContentContext","menuScope","setOpen","useControllableState","prop","defaultProp","onChange","handleOpenToggle","React","useCallback","prevOpen","isInsideContent","_react","$c7ff2201b6eec7866a95d2679b05981$var$DropdownMenuProvider","scope","isRootMenu","onOpenToggle","_radixUiReactMenu","Sub","_babelRuntimeHelpersEsmExtends","$c7ff2201b6eec7866a95d2679b05981$var$DropdownMenuRoot","DropdownMenuRoot","dir","modal","triggerRef","useRef","triggerId","useId","contentId","Root","DropdownMenuTrigger","forwardRef","forwardedRef","triggerProps","context","Anchor","asChild","Primitive","button","type","id","undefined","ref","composeRefs","onPointerDown","composeEventHandlers","event","ctrlKey","preventDefault","onKeyDown","includes","key","ContentProvider","DropdownMenuContent","contentProps","commonProps","style","$c7ff2201b6eec7866a95d2679b05981$var$ContentProvider","$c7ff2201b6eec7866a95d2679b05981$var$DropdownMenuRootContent","Content","DropdownMenuRootContent","portalled","hasInteractedOutsideRef","onCloseAutoFocus","_context$triggerRef$c","_props$onCloseAutoFoc","defaultPrevented","current","focus","onInteractOutside","_props$onInteractOuts","originalEvent","detail","ctrlLeftClick","isRightClick","target","_context$triggerRef$c2","contains","DropdownMenuGroup","groupProps","Group","DropdownMenuLabel","labelProps","Label","DropdownMenuItem","itemProps","Item","DropdownMenuTriggerItem","triggerItemProps","SubTrigger","DropdownMenuCheckboxItem","checkboxItemProps","CheckboxItem","DropdownMenuRadioGroup","radioGroupProps","RadioGroup","DropdownMenuRadioItem","radioItemProps","RadioItem","DropdownMenuItemIndicator","itemIndicatorProps","ItemIndicator","DropdownMenuSeparator","separatorProps","Separator","DropdownMenuArrow","arrowProps","Arrow","Trigger","TriggerItem"],"sources":["/Users/angelinadeo/thehacktrical/NYUhack/node_modules/@radix-ui/react-dropdown-menu/dist/packages/react/dropdown-menu/src/DropdownMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst DROPDOWN_MENU_NAME = 'DropdownMenu';\n\ntype ScopedProps<P> = P & { __scopeDropdownMenu?: Scope };\nconst [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(\n  DROPDOWN_MENU_NAME,\n  [createMenuScope]\n);\nconst useMenuScope = createMenuScope();\n\ntype DropdownMenuRootContextValue = {\n  isRootMenu: true;\n  triggerId: string;\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\ntype DropdownMenuSubContextValue = {\n  isRootMenu: false;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n};\n\nconst [DropdownMenuProvider, useDropdownMenuContext] = createDropdownMenuContext<\n  DropdownMenuRootContextValue | DropdownMenuSubContextValue\n>(DROPDOWN_MENU_NAME);\n\ninterface DropdownMenuProps {\n  dir?: Direction;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n  children?: React.ReactNode;\n}\n\nconst DropdownMenu: React.FC<DropdownMenuProps> = (props: ScopedProps<DropdownMenuProps>) => {\n  const { __scopeDropdownMenu, children, open: openProp, defaultOpen, onOpenChange } = props;\n  const contentContext = useContentContext(DROPDOWN_MENU_NAME, __scopeDropdownMenu);\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  const handleOpenToggle = React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]);\n\n  return contentContext.isInsideContent ? (\n    <DropdownMenuProvider\n      scope={__scopeDropdownMenu}\n      isRootMenu={false}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={handleOpenToggle}\n    >\n      <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n        {children}\n      </MenuPrimitive.Sub>\n    </DropdownMenuProvider>\n  ) : (\n    <DropdownMenuRoot {...props} open={open} onOpenChange={setOpen} onOpenToggle={handleOpenToggle}>\n      {children}\n    </DropdownMenuRoot>\n  );\n};\n\nDropdownMenu.displayName = DROPDOWN_MENU_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ninterface DropdownMenuRootProps {\n  dir?: Direction;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal?: boolean;\n  children?: React.ReactNode;\n}\n\nconst DropdownMenuRoot: React.FC<DropdownMenuRootProps> = (\n  props: ScopedProps<DropdownMenuRootProps>\n) => {\n  const {\n    __scopeDropdownMenu,\n    children,\n    dir,\n    open,\n    onOpenChange,\n    onOpenToggle,\n    modal = true,\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  return (\n    <DropdownMenuProvider\n      scope={__scopeDropdownMenu}\n      isRootMenu={true}\n      triggerId={useId()}\n      triggerRef={triggerRef}\n      contentId={useId()}\n      open={open}\n      onOpenChange={onOpenChange}\n      onOpenToggle={onOpenToggle}\n      modal={modal}\n    >\n      <MenuPrimitive.Root\n        {...menuScope}\n        open={open}\n        onOpenChange={onOpenChange}\n        dir={dir}\n        modal={modal}\n      >\n        {children}\n      </MenuPrimitive.Root>\n    </DropdownMenuProvider>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DropdownMenuTrigger';\n\ntype DropdownMenuTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DropdownMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst DropdownMenuTrigger = React.forwardRef<DropdownMenuTriggerElement, DropdownMenuTriggerProps>(\n  (props: ScopedProps<DropdownMenuTriggerProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...triggerProps } = props;\n    const context = useDropdownMenuContext(TRIGGER_NAME, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return context.isRootMenu ? (\n      <MenuPrimitive.Anchor asChild {...menuScope}>\n        <Primitive.button\n          type=\"button\"\n          id={context.triggerId}\n          aria-haspopup=\"menu\"\n          aria-expanded={context.open ? true : undefined}\n          aria-controls={context.open ? context.contentId : undefined}\n          data-state={context.open ? 'open' : 'closed'}\n          {...triggerProps}\n          ref={composeRefs(forwardedRef, context.triggerRef)}\n          onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (event.button === 0 && event.ctrlKey === false) {\n              // prevent trigger focusing when opening\n              // this allows the content to be given focus without competition\n              if (!context.open) event.preventDefault();\n              context.onOpenToggle();\n            }\n          })}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event: React.KeyboardEvent) => {\n            if ([' ', 'Enter', 'ArrowDown'].includes(event.key)) {\n              event.preventDefault();\n              context.onOpenChange(true);\n            }\n          })}\n        />\n      </MenuPrimitive.Anchor>\n    ) : null;\n  }\n);\n\nDropdownMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DropdownMenuContent';\n\nconst [ContentProvider, useContentContext] = createDropdownMenuContext(CONTENT_NAME, {\n  isInsideContent: false,\n});\n\ntype DropdownMenuContentElement =\n  | DropdownMenuRootContentElement\n  | React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Content>;\ninterface DropdownMenuContentProps extends DropdownMenuRootContentProps, MenuContentProps {}\n\nconst DropdownMenuContent = React.forwardRef<DropdownMenuContentElement, DropdownMenuContentProps>(\n  (props: ScopedProps<DropdownMenuContentProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...contentProps } = props;\n    const context = useDropdownMenuContext(CONTENT_NAME, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const commonProps = {\n      ...contentProps,\n      style: {\n        ...props.style,\n        // re-namespace exposed content custom property\n        ['--radix-dropdown-menu-content-transform-origin' as any]:\n          'var(--radix-popper-transform-origin)',\n      },\n    };\n\n    return (\n      <ContentProvider scope={__scopeDropdownMenu} isInsideContent={true}>\n        {context.isRootMenu ? (\n          <DropdownMenuRootContent\n            __scopeDropdownMenu={__scopeDropdownMenu}\n            {...commonProps}\n            ref={forwardedRef}\n          />\n        ) : (\n          <MenuPrimitive.Content {...menuScope} {...commonProps} ref={forwardedRef} />\n        )}\n      </ContentProvider>\n    );\n  }\n);\n\nDropdownMenuContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype DropdownMenuRootContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ninterface DropdownMenuRootContentProps extends ScopedProps<MenuContentProps> {}\n\nconst DropdownMenuRootContent = React.forwardRef<\n  DropdownMenuRootContentElement,\n  DropdownMenuRootContentProps\n>((props, forwardedRef) => {\n  const { __scopeDropdownMenu, portalled = true, ...contentProps } = props;\n  const context = useDropdownMenuContext(CONTENT_NAME, __scopeDropdownMenu);\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const hasInteractedOutsideRef = React.useRef(false);\n\n  return context.isRootMenu ? (\n    <MenuPrimitive.Content\n      id={context.contentId}\n      aria-labelledby={context.triggerId}\n      {...menuScope}\n      {...contentProps}\n      ref={forwardedRef}\n      portalled={portalled}\n      onCloseAutoFocus={(event) => {\n        props.onCloseAutoFocus?.(event);\n\n        if (!event.defaultPrevented) {\n          if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n          // Always prevent auto focus because we either focus manually or want user agent focus\n          event.preventDefault();\n        }\n\n        hasInteractedOutsideRef.current = false;\n      }}\n      onInteractOutside={(event) => {\n        props.onInteractOutside?.(event);\n\n        if (!event.defaultPrevented) {\n          const originalEvent = event.detail.originalEvent as PointerEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;\n        }\n\n        // Prevent dismissing when clicking the trigger.\n        // As the trigger is already setup to close, without doing so would\n        // cause it to close and immediately open.\n        //\n        // We use `onInteractOutside` as some browsers also\n        // focus on pointer down, creating the same issue.\n        const target = event.target as HTMLElement;\n        const targetIsTrigger = context.triggerRef.current?.contains(target);\n        if (targetIsTrigger) event.preventDefault();\n      }}\n    />\n  ) : null;\n});\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'DropdownMenuGroup';\n\ntype DropdownMenuGroupElement = React.ElementRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface DropdownMenuGroupProps extends MenuGroupProps {}\n\nconst DropdownMenuGroup = React.forwardRef<DropdownMenuGroupElement, DropdownMenuGroupProps>(\n  (props: ScopedProps<DropdownMenuGroupProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'DropdownMenuLabel';\n\ntype DropdownMenuLabelElement = React.ElementRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Label>;\ninterface DropdownMenuLabelProps extends MenuLabelProps {}\n\nconst DropdownMenuLabel = React.forwardRef<DropdownMenuLabelElement, DropdownMenuLabelProps>(\n  (props: ScopedProps<DropdownMenuLabelProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Label {...menuScope} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'DropdownMenuItem';\n\ntype DropdownMenuItemElement = React.ElementRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Item>;\ninterface DropdownMenuItemProps extends MenuItemProps {}\n\nconst DropdownMenuItem = React.forwardRef<DropdownMenuItemElement, DropdownMenuItemProps>(\n  (props: ScopedProps<DropdownMenuItemProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Item {...menuScope} {...itemProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuTriggerItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_ITEM_NAME = 'DropdownMenuTriggerItem';\n\ntype DropdownMenuTriggerItemElement = React.ElementRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface DropdownMenuTriggerItemProps extends MenuSubTriggerProps {}\n\nconst DropdownMenuTriggerItem = React.forwardRef<\n  DropdownMenuTriggerItemElement,\n  DropdownMenuTriggerItemProps\n>((props: ScopedProps<DropdownMenuTriggerItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...triggerItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.SubTrigger {...menuScope} {...triggerItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuTriggerItem.displayName = TRIGGER_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'DropdownMenuCheckboxItem';\n\ntype DropdownMenuCheckboxItemElement = React.ElementRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>;\ninterface DropdownMenuCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  DropdownMenuCheckboxItemElement,\n  DropdownMenuCheckboxItemProps\n>((props: ScopedProps<DropdownMenuCheckboxItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...checkboxItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.CheckboxItem {...menuScope} {...checkboxItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'DropdownMenuRadioGroup';\n\ntype DropdownMenuRadioGroupElement = React.ElementRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface DropdownMenuRadioGroupProps extends MenuRadioGroupProps {}\n\nconst DropdownMenuRadioGroup = React.forwardRef<\n  DropdownMenuRadioGroupElement,\n  DropdownMenuRadioGroupProps\n>((props: ScopedProps<DropdownMenuRadioGroupProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...radioGroupProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n});\n\nDropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'DropdownMenuRadioItem';\n\ntype DropdownMenuRadioItemElement = React.ElementRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface DropdownMenuRadioItemProps extends MenuRadioItemProps {}\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  DropdownMenuRadioItemElement,\n  DropdownMenuRadioItemProps\n>((props: ScopedProps<DropdownMenuRadioItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...radioItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'DropdownMenuItemIndicator';\n\ntype DropdownMenuItemIndicatorElement = React.ElementRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface DropdownMenuItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst DropdownMenuItemIndicator = React.forwardRef<\n  DropdownMenuItemIndicatorElement,\n  DropdownMenuItemIndicatorProps\n>((props: ScopedProps<DropdownMenuItemIndicatorProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n});\n\nDropdownMenuItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'DropdownMenuSeparator';\n\ntype DropdownMenuSeparatorElement = React.ElementRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>;\ninterface DropdownMenuSeparatorProps extends MenuSeparatorProps {}\n\nconst DropdownMenuSeparator = React.forwardRef<\n  DropdownMenuSeparatorElement,\n  DropdownMenuSeparatorProps\n>((props: ScopedProps<DropdownMenuSeparatorProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...separatorProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.Separator {...menuScope} {...separatorProps} ref={forwardedRef} />;\n});\n\nDropdownMenuSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'DropdownMenuArrow';\n\ntype DropdownMenuArrowElement = React.ElementRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>;\ninterface DropdownMenuArrowProps extends MenuArrowProps {}\n\nconst DropdownMenuArrow = React.forwardRef<DropdownMenuArrowElement, DropdownMenuArrowProps>(\n  (props: ScopedProps<DropdownMenuArrowProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Arrow {...menuScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = DropdownMenu;\nconst Trigger = DropdownMenuTrigger;\nconst Content = DropdownMenuContent;\nconst Group = DropdownMenuGroup;\nconst Label = DropdownMenuLabel;\nconst Item = DropdownMenuItem;\nconst TriggerItem = DropdownMenuTriggerItem;\nconst CheckboxItem = DropdownMenuCheckboxItem;\nconst RadioGroup = DropdownMenuRadioGroup;\nconst RadioItem = DropdownMenuRadioItem;\nconst ItemIndicator = DropdownMenuItemIndicator;\nconst Separator = DropdownMenuSeparator;\nconst Arrow = DropdownMenuArrow;\n\nexport {\n  createDropdownMenuScope,\n  //\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuTriggerItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuSeparator,\n  DropdownMenuArrow,\n  //\n  Root,\n  Trigger,\n  Content,\n  Group,\n  Label,\n  Item,\n  TriggerItem,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n};\nexport type {\n  DropdownMenuProps,\n  DropdownMenuTriggerProps,\n  DropdownMenuContentProps,\n  DropdownMenuGroupProps,\n  DropdownMenuLabelProps,\n  DropdownMenuItemProps,\n  DropdownMenuTriggerItemProps,\n  DropdownMenuCheckboxItemProps,\n  DropdownMenuRadioGroupProps,\n  DropdownMenuRadioItemProps,\n  DropdownMenuItemIndicatorProps,\n  DropdownMenuSeparatorProps,\n  DropdownMenuArrowProps,\n};\n"]},"metadata":{},"sourceType":"module"}