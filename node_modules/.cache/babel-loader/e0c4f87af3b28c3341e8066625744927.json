{"ast":null,"code":"import { __assign, __spreadArray, __read, __values, __rest } from './_virtual/_tslib.js';\nimport { STATE_DELIMITER } from './constants.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { isFunction, mapValues, isArray, flatten, keys, toArray, toStateValue, isString, getEventType, toSCXMLEvent, matchesState, path, evaluateGuard, mapContext, pathToStateValue, isBuiltInEvent, partition, updateHistoryValue, toStatePath, mapFilterValues, warn, toStatePaths, nestedPath, normalizeTarget, toGuard, toTransitionConfigArray, isMachine, createInvokeId } from './utils.js';\nimport { SpecialTargets } from './types.js';\nimport { getAllStateNodes, getConfiguration, isInFinalState, getTagsFromConfiguration, has, getChildren, getValue, isLeafNode } from './stateUtils.js';\nimport { start as start$1, stop as stop$1, invoke, update, nullEvent, raise as raise$1, send as send$1 } from './actionTypes.js';\nimport { done, start, raise, stop, toActionObjects, resolveActions, doneInvoke, error, toActionObject, toActivityDefinition, after, send, cancel, initEvent } from './actions.js';\nimport { State, stateValuesEqual } from './State.js';\nimport { createInvocableActor } from './Actor.js';\nimport { toInvokeDefinition } from './invokeUtils.js';\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\nvar WILDCARD = '*';\nvar EMPTY_OBJECT = {};\n\nvar isStateId = function (str) {\n  return str[0] === STATE_IDENTIFIER;\n};\n\nvar createDefaultOptions = function () {\n  return {\n    actions: {},\n    guards: {},\n    services: {},\n    activities: {},\n    delays: {}\n  };\n};\n\nvar validateArrayifiedTransitions = function (stateNode, event, transitions) {\n  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {\n    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));\n  });\n  var eventText = event === NULL_EVENT ? 'the transient event' : \"event '\".concat(event, \"'\");\n  warn(!hasNonLastUnguardedTarget, \"One or more transitions for \".concat(eventText, \" on state '\").concat(stateNode.id, \"' are unreachable. \") + \"Make sure that the default transition is the last one defined.\");\n};\n\nvar StateNode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function StateNode(\n  /**\r\n   * The raw config used to create the machine.\r\n   */\n  config, options,\n  /**\r\n   * The initial extended state\r\n   */\n  _context // TODO: this is unsafe, but we're removing it in v5 anyway\n  ) {\n    var _this = this;\n\n    if (_context === void 0) {\n      _context = 'context' in config ? config.context : undefined;\n    }\n\n    var _a;\n\n    this.config = config;\n    this._context = _context;\n    /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */\n\n    this.order = -1;\n    this.__xstatenode = true;\n    this.__cache = {\n      events: undefined,\n      relativeValue: new Map(),\n      initialStateValue: undefined,\n      initialState: undefined,\n      on: undefined,\n      transitions: undefined,\n      candidates: {},\n      delayedTransitions: undefined\n    };\n    this.idMap = {};\n    this.tags = [];\n    this.options = Object.assign(createDefaultOptions(), options);\n    this.parent = this.options._parent;\n    this.key = this.config.key || this.options._key || this.config.id || '(machine)';\n    this.machine = this.parent ? this.parent.machine : this;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n    this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);\n    this.version = this.parent ? this.parent.version : this.config.version;\n    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};\n    this.description = this.config.description;\n\n    if (!IS_PRODUCTION) {\n      warn(!('parallel' in this.config), \"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \".concat(this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\".concat(this.type, \"'`\"), \" in the config for state node '\").concat(this.id, \"' instead.\"));\n    }\n\n    this.initial = this.config.initial;\n    this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {\n      var _a;\n\n      var stateNode = new StateNode(stateConfig, {\n        _parent: _this,\n        _key: key\n      });\n      Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n      return stateNode;\n    }) : EMPTY_OBJECT; // Document order\n\n    var order = 0;\n\n    function dfs(stateNode) {\n      var e_1, _a;\n\n      stateNode.order = order++;\n\n      try {\n        for (var _b = __values(getChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          dfs(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    dfs(this); // History config\n\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {\n      var event = _a.event;\n      return event === NULL_EVENT;\n    }) : NULL_EVENT in this.config.on);\n    this.strict = !!this.config.strict; // TODO: deprecate (entry)\n\n    this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {\n      return toActionObject(action);\n    }); // TODO: deprecate (exit)\n\n    this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {\n      return toActionObject(action);\n    });\n    this.meta = this.config.meta;\n    this.doneData = this.type === 'final' ? this.config.data : undefined;\n    this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {\n      var _a, _b;\n\n      if (isMachine(invokeConfig)) {\n        var invokeId = createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);\n        return toInvokeDefinition({\n          src: invokeId,\n          id: invokeId\n        });\n      } else if (isString(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        return toInvokeDefinition(__assign(__assign({}, invokeConfig), {\n          id: invokeId,\n          src: invokeConfig.src\n        }));\n      } else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);\n        return toInvokeDefinition(__assign(__assign({\n          id: invokeId\n        }, invokeConfig), {\n          src: invokeId\n        }));\n      } else {\n        var invokeSource = invokeConfig.src;\n        return toInvokeDefinition(__assign(__assign({\n          id: createInvokeId(_this.id, i)\n        }, invokeConfig), {\n          src: invokeSource\n        }));\n      }\n    });\n    this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {\n      return toActivityDefinition(activity);\n    });\n    this.transition = this.transition.bind(this);\n    this.tags = toArray(this.config.tags); // TODO: this is the real fix for initialization once\n    // state node getters are deprecated\n    // if (!this.parent) {\n    //   this._init();\n    // }\n  }\n\n  StateNode.prototype._init = function () {\n    if (this.__cache.transitions) {\n      return;\n    }\n\n    getAllStateNodes(this).forEach(function (stateNode) {\n      return stateNode.on;\n    });\n  };\n  /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */\n\n\n  StateNode.prototype.withConfig = function (options, context) {\n    var _a = this.options,\n        actions = _a.actions,\n        activities = _a.activities,\n        guards = _a.guards,\n        services = _a.services,\n        delays = _a.delays;\n    return new StateNode(this.config, {\n      actions: __assign(__assign({}, actions), options.actions),\n      activities: __assign(__assign({}, activities), options.activities),\n      guards: __assign(__assign({}, guards), options.guards),\n      services: __assign(__assign({}, services), options.services),\n      delays: __assign(__assign({}, delays), options.delays)\n    }, context !== null && context !== void 0 ? context : this.context);\n  };\n  /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */\n\n\n  StateNode.prototype.withContext = function (context) {\n    return new StateNode(this.config, this.options, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"context\", {\n    get: function () {\n      return isFunction(this._context) ? this._context() : this._context;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"definition\", {\n    /**\r\n     * The well-structured state node definition.\r\n     */\n    get: function () {\n      return {\n        id: this.id,\n        key: this.key,\n        version: this.version,\n        context: this.context,\n        type: this.type,\n        initial: this.initial,\n        history: this.history,\n        states: mapValues(this.states, function (state) {\n          return state.definition;\n        }),\n        on: this.on,\n        transitions: this.transitions,\n        entry: this.onEntry,\n        exit: this.onExit,\n        activities: this.activities || [],\n        meta: this.meta,\n        order: this.order || -1,\n        data: this.doneData,\n        invoke: this.invoke,\n        description: this.description,\n        tags: this.tags\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.toJSON = function () {\n    return this.definition;\n  };\n\n  Object.defineProperty(StateNode.prototype, \"on\", {\n    /**\r\n     * The mapping of events to transitions.\r\n     */\n    get: function () {\n      if (this.__cache.on) {\n        return this.__cache.on;\n      }\n\n      var transitions = this.transitions;\n      return this.__cache.on = transitions.reduce(function (map, transition) {\n        map[transition.eventType] = map[transition.eventType] || [];\n        map[transition.eventType].push(transition);\n        return map;\n      }, {});\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"after\", {\n    get: function () {\n      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"transitions\", {\n    /**\r\n     * All the transitions that can be taken from this state node.\r\n     */\n    get: function () {\n      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getCandidates = function (eventName) {\n    if (this.__cache.candidates[eventName]) {\n      return this.__cache.candidates[eventName];\n    }\n\n    var transient = eventName === NULL_EVENT;\n    var candidates = this.transitions.filter(function (transition) {\n      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n\n      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n    });\n    this.__cache.candidates[eventName] = candidates;\n    return candidates;\n  };\n  /**\r\n   * All delayed transitions from the config.\r\n   */\n\n\n  StateNode.prototype.getDelayedTransitions = function () {\n    var _this = this;\n\n    var afterConfig = this.config.after;\n\n    if (!afterConfig) {\n      return [];\n    }\n\n    var mutateEntryExit = function (delay, i) {\n      var delayRef = isFunction(delay) ? \"\".concat(_this.id, \":delay[\").concat(i, \"]\") : delay;\n      var eventType = after(delayRef, _this.id);\n\n      _this.onEntry.push(send(eventType, {\n        delay: delay\n      }));\n\n      _this.onExit.push(cancel(eventType));\n\n      return eventType;\n    };\n\n    var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {\n      var eventType = mutateEntryExit(transition.delay, i);\n      return __assign(__assign({}, transition), {\n        event: eventType\n      });\n    }) : flatten(keys(afterConfig).map(function (delay, i) {\n      var configTransition = afterConfig[delay];\n      var resolvedTransition = isString(configTransition) ? {\n        target: configTransition\n      } : configTransition;\n      var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n      var eventType = mutateEntryExit(resolvedDelay, i);\n      return toArray(resolvedTransition).map(function (transition) {\n        return __assign(__assign({}, transition), {\n          event: eventType,\n          delay: resolvedDelay\n        });\n      });\n    }));\n    return delayedTransitions.map(function (delayedTransition) {\n      var delay = delayedTransition.delay;\n      return __assign(__assign({}, _this.formatTransition(delayedTransition)), {\n        delay: delay\n      });\n    });\n  };\n  /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */\n\n\n  StateNode.prototype.getStateNodes = function (state) {\n    var _a;\n\n    var _this = this;\n\n    if (!state) {\n      return [];\n    }\n\n    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);\n\n    if (isString(stateValue)) {\n      var initialStateValue = this.getStateNode(stateValue).initial;\n      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];\n    }\n\n    var subStateKeys = keys(stateValue);\n    var subStateNodes = [this];\n    subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function (subStateKey) {\n      return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n    }))), false));\n    return subStateNodes;\n  };\n  /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */\n\n\n  StateNode.prototype.handles = function (event) {\n    var eventType = getEventType(event);\n    return this.events.includes(eventType);\n  };\n  /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */\n\n\n  StateNode.prototype.resolveState = function (state) {\n    var configuration = Array.from(getConfiguration([], this.getStateNodes(state.value)));\n    return new State(__assign(__assign({}, state), {\n      value: this.resolve(state.value),\n      configuration: configuration,\n      done: isInFinalState(configuration, this),\n      tags: getTagsFromConfiguration(configuration)\n    }));\n  };\n\n  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {\n    var stateNode = this.getStateNode(stateValue);\n    var next = stateNode.next(state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {\n    var subStateKeys = keys(stateValue);\n    var stateNode = this.getStateNode(subStateKeys[0]);\n\n    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {\n    var e_2, _a;\n\n    var transitionMap = {};\n\n    try {\n      for (var _b = __values(keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var subStateKey = _c.value;\n        var subStateValue = stateValue[subStateKey];\n\n        if (!subStateValue) {\n          continue;\n        }\n\n        var subStateNode = this.getStateNode(subStateKey);\n\n        var next = subStateNode._transition(subStateValue, state, _event);\n\n        if (next) {\n          transitionMap[subStateKey] = next;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var stateTransitions = keys(transitionMap).map(function (key) {\n      return transitionMap[key];\n    });\n    var enabledTransitions = flatten(stateTransitions.map(function (st) {\n      return st.transitions;\n    }));\n    var willTransition = stateTransitions.some(function (st) {\n      return st.transitions.length > 0;\n    });\n\n    if (!willTransition) {\n      return this.next(state, _event);\n    }\n\n    var entryNodes = flatten(stateTransitions.map(function (t) {\n      return t.entrySet;\n    }));\n    var configuration = flatten(keys(transitionMap).map(function (key) {\n      return transitionMap[key].configuration;\n    }));\n    return {\n      transitions: enabledTransitions,\n      entrySet: entryNodes,\n      exitSet: flatten(stateTransitions.map(function (t) {\n        return t.exitSet;\n      })),\n      configuration: configuration,\n      source: state,\n      actions: flatten(keys(transitionMap).map(function (key) {\n        return transitionMap[key].actions;\n      }))\n    };\n  };\n\n  StateNode.prototype._transition = function (stateValue, state, _event) {\n    // leaf node\n    if (isString(stateValue)) {\n      return this.transitionLeafNode(stateValue, state, _event);\n    } // hierarchical node\n\n\n    if (keys(stateValue).length === 1) {\n      return this.transitionCompoundNode(stateValue, state, _event);\n    } // orthogonal node\n\n\n    return this.transitionParallelNode(stateValue, state, _event);\n  };\n\n  StateNode.prototype.getTransitionData = function (state, event) {\n    return this._transition(state.value, state, toSCXMLEvent(event));\n  };\n\n  StateNode.prototype.next = function (state, _event) {\n    var e_3, _a;\n\n    var _this = this;\n\n    var eventName = _event.name;\n    var actions = [];\n    var nextStateNodes = [];\n    var selectedTransition;\n\n    try {\n      for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var candidate = _c.value;\n        var cond = candidate.cond,\n            stateIn = candidate.in;\n        var resolvedContext = state.context;\n        var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID\n        state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent\n        matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;\n        var guardPassed = false;\n\n        try {\n          guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);\n        } catch (err) {\n          throw new Error(\"Unable to evaluate guard '\".concat(cond.name || cond.type, \"' in transition for event '\").concat(eventName, \"' in state node '\").concat(this.id, \"':\\n\").concat(err.message));\n        }\n\n        if (guardPassed && isInState) {\n          if (candidate.target !== undefined) {\n            nextStateNodes = candidate.target;\n          }\n\n          actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));\n          selectedTransition = candidate;\n          break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (!selectedTransition) {\n      return undefined;\n    }\n\n    if (!nextStateNodes.length) {\n      return {\n        transitions: [selectedTransition],\n        entrySet: [],\n        exitSet: [],\n        configuration: state.value ? [this] : [],\n        source: state,\n        actions: actions\n      };\n    }\n\n    var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {\n      return _this.getRelativeStateNodes(stateNode, state.historyValue);\n    }));\n    var isInternal = !!selectedTransition.internal;\n    var reentryNodes = isInternal ? [] : flatten(allNextStateNodes.map(function (n) {\n      return _this.nodesFromChild(n);\n    }));\n    return {\n      transitions: [selectedTransition],\n      entrySet: reentryNodes,\n      exitSet: isInternal ? [] : [this],\n      configuration: allNextStateNodes,\n      source: state,\n      actions: actions\n    };\n  };\n\n  StateNode.prototype.nodesFromChild = function (childStateNode) {\n    if (childStateNode.escapes(this)) {\n      return [];\n    }\n\n    var nodes = [];\n    var marker = childStateNode;\n\n    while (marker && marker !== this) {\n      nodes.push(marker);\n      marker = marker.parent;\n    }\n\n    nodes.push(this); // inclusive\n\n    return nodes;\n  };\n  /**\r\n   * Whether the given state node \"escapes\" this state node. If the `stateNode` is equal to or the parent of\r\n   * this state node, it does not escape.\r\n   */\n\n\n  StateNode.prototype.escapes = function (stateNode) {\n    if (this === stateNode) {\n      return false;\n    }\n\n    var parent = this.parent;\n\n    while (parent) {\n      if (parent === stateNode) {\n        return false;\n      }\n\n      parent = parent.parent;\n    }\n\n    return true;\n  };\n\n  StateNode.prototype.getActions = function (transition, currentContext, _event, prevState) {\n    var e_4, _a, e_5, _b;\n\n    var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);\n    var resolvedConfig = transition.configuration.length ? getConfiguration(prevConfig, transition.configuration) : prevConfig;\n\n    try {\n      for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {\n        var sn = resolvedConfig_1_1.value;\n\n        if (!has(prevConfig, sn)) {\n          transition.entrySet.push(sn);\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    try {\n      for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {\n        var sn = prevConfig_1_1.value;\n\n        if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {\n          transition.exitSet.push(sn);\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    var doneEvents = flatten(transition.entrySet.map(function (sn) {\n      var events = [];\n\n      if (sn.type !== 'final') {\n        return events;\n      }\n\n      var parent = sn.parent;\n\n      if (!parent.parent) {\n        return events;\n      }\n\n      events.push(done(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.\n      done(parent.id, sn.doneData ? mapContext(sn.doneData, currentContext, _event) : undefined));\n      var grandparent = parent.parent;\n\n      if (grandparent.type === 'parallel') {\n        if (getChildren(grandparent).every(function (parentNode) {\n          return isInFinalState(transition.configuration, parentNode);\n        })) {\n          events.push(done(grandparent.id));\n        }\n      }\n\n      return events;\n    }));\n    transition.exitSet.sort(function (a, b) {\n      return b.order - a.order;\n    });\n    transition.entrySet.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    var entryStates = new Set(transition.entrySet);\n    var exitStates = new Set(transition.exitSet);\n\n    var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.activities.map(function (activity) {\n        return start(activity);\n      })), false), __read(stateNode.onEntry), false);\n    })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function (activity) {\n        return stop(activity);\n      })), false);\n    }))], 2),\n        entryActions = _c[0],\n        exitActions = _c[1];\n\n    var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);\n    return actions;\n  };\n  /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */\n\n\n  StateNode.prototype.transition = function (state, event, context) {\n    if (state === void 0) {\n      state = this.initialState;\n    }\n\n    var _event = toSCXMLEvent(event);\n\n    var currentState;\n\n    if (state instanceof State) {\n      currentState = context === undefined ? state : this.resolveState(State.from(state, context));\n    } else {\n      var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);\n      var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;\n      currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));\n    }\n\n    if (!IS_PRODUCTION && _event.name === WILDCARD) {\n      throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD, \"')\"));\n    }\n\n    if (this.strict) {\n      if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {\n        throw new Error(\"Machine '\".concat(this.id, \"' does not accept event '\").concat(_event.name, \"'\"));\n      }\n    }\n\n    var stateTransition = this._transition(currentState.value, currentState, _event) || {\n      transitions: [],\n      configuration: [],\n      entrySet: [],\n      exitSet: [],\n      source: currentState,\n      actions: []\n    };\n    var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));\n    var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;\n    stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);\n    return this.resolveTransition(stateTransition, currentState, _event);\n  };\n\n  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {\n    var _a;\n\n    var currentActions = state.actions;\n    state = this.transition(state, _event); // Save original event to state\n    // TODO: this should be the raised event! Delete in V5 (breaking)\n\n    state._event = originalEvent;\n    state.event = originalEvent.data;\n\n    (_a = state.actions).unshift.apply(_a, __spreadArray([], __read(currentActions), false));\n\n    return state;\n  };\n\n  StateNode.prototype.resolveTransition = function (stateTransition, currentState, _event, context) {\n    var e_6, _a;\n\n    var _this = this;\n\n    if (_event === void 0) {\n      _event = initEvent;\n    }\n\n    if (context === void 0) {\n      context = this.machine.context;\n    }\n\n    var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n    // - this is the initial state (there is no current state)\n    // - OR there are transitions\n\n    var willTransition = !currentState || stateTransition.transitions.length > 0;\n    var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;\n    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n    var currentContext = currentState ? currentState.context : context;\n    var actions = this.getActions(stateTransition, currentContext, _event, currentState);\n    var activities = currentState ? __assign({}, currentState.activities) : {};\n\n    try {\n      for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\n        var action = actions_1_1.value;\n\n        if (action.type === start$1) {\n          activities[action.activity.id || action.activity.type] = action;\n        } else if (action.type === stop$1) {\n          activities[action.activity.id || action.activity.type] = false;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    var _b = __read(resolveActions(this, currentState, currentContext, _event, actions, this.machine.config.preserveActionOrder), 2),\n        resolvedActions = _b[0],\n        updatedContext = _b[1];\n\n    var _c = __read(partition(resolvedActions, function (action) {\n      return action.type === raise$1 || action.type === send$1 && action.to === SpecialTargets.Internal;\n    }), 2),\n        raisedEvents = _c[0],\n        nonRaisedActions = _c[1];\n\n    var invokeActions = resolvedActions.filter(function (action) {\n      var _a;\n\n      return action.type === start$1 && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke;\n    });\n    var children = invokeActions.reduce(function (acc, action) {\n      acc[action.activity.id] = createInvocableActor(action.activity, _this.machine, updatedContext, _event);\n      return acc;\n    }, currentState ? __assign({}, currentState.children) : {});\n    var resolvedConfiguration = resolvedStateValue ? stateTransition.configuration : currentState ? currentState.configuration : [];\n    var isDone = isInFinalState(resolvedConfiguration, this);\n    var nextState = new State({\n      value: resolvedStateValue || currentState.value,\n      context: updatedContext,\n      _event: _event,\n      // Persist _sessionid between states\n      _sessionid: currentState ? currentState._sessionid : null,\n      historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n      actions: resolvedStateValue ? nonRaisedActions : [],\n      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n      events: [],\n      configuration: resolvedConfiguration,\n      transitions: stateTransition.transitions,\n      children: children,\n      done: isDone,\n      tags: currentState === null || currentState === void 0 ? void 0 : currentState.tags,\n      machine: this\n    });\n    var didUpdateContext = currentContext !== updatedContext;\n    nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n\n    var history = nextState.history;\n\n    if (history) {\n      delete history.history;\n    } // There are transient transitions if the machine is not in a final state\n    // and if some of the state nodes have transient (\"always\") transitions.\n\n\n    var isTransient = !isDone && (this._transient || configuration.some(function (stateNode) {\n      return stateNode._transient;\n    })); // If there are no enabled transitions, check if there are transient transitions.\n    // If there are transient transitions, continue checking for more transitions\n    // because an transient transition should be triggered even if there are no\n    // enabled transitions.\n    //\n    // If we're already working on an transient transition (by checking\n    // if the event is a NULL_EVENT), then stop to prevent an infinite loop.\n    //\n    // Otherwise, if there are no enabled nor transient transitions, we are done.\n\n    if (!willTransition && (!isTransient || _event.name === NULL_EVENT)) {\n      return nextState;\n    }\n\n    var maybeNextState = nextState;\n\n    if (!isDone) {\n      if (isTransient) {\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n          type: nullEvent\n        }, _event);\n      }\n\n      while (raisedEvents.length) {\n        var raisedEvent = raisedEvents.shift();\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);\n      }\n    } // Detect if state changed\n\n\n    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);\n    maybeNextState.changed = changed; // Preserve original history after raised events\n\n    maybeNextState.history = history;\n    maybeNextState.tags = getTagsFromConfiguration(maybeNextState.configuration);\n    return maybeNextState;\n  };\n  /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */\n\n\n  StateNode.prototype.getStateNode = function (stateKey) {\n    if (isStateId(stateKey)) {\n      return this.machine.getStateNodeById(stateKey);\n    }\n\n    if (!this.states) {\n      throw new Error(\"Unable to retrieve child state '\".concat(stateKey, \"' from '\").concat(this.id, \"'; no child states exist.\"));\n    }\n\n    var result = this.states[stateKey];\n\n    if (!result) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return result;\n  };\n  /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */\n\n\n  StateNode.prototype.getStateNodeById = function (stateId) {\n    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n\n    if (resolvedStateId === this.id) {\n      return this;\n    }\n\n    var stateNode = this.machine.idMap[resolvedStateId];\n\n    if (!stateNode) {\n      throw new Error(\"Child state node '#\".concat(resolvedStateId, \"' does not exist on machine '\").concat(this.id, \"'\"));\n    }\n\n    return stateNode;\n  };\n  /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */\n\n\n  StateNode.prototype.getStateNodeByPath = function (statePath) {\n    if (typeof statePath === 'string' && isStateId(statePath)) {\n      try {\n        return this.getStateNodeById(statePath.slice(1));\n      } catch (e) {// try individual paths\n        // throw e;\n      }\n    }\n\n    var arrayStatePath = toStatePath(statePath, this.delimiter).slice();\n    var currentStateNode = this;\n\n    while (arrayStatePath.length) {\n      var key = arrayStatePath.shift();\n\n      if (!key.length) {\n        break;\n      }\n\n      currentStateNode = currentStateNode.getStateNode(key);\n    }\n\n    return currentStateNode;\n  };\n  /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */\n\n\n  StateNode.prototype.resolve = function (stateValue) {\n    var _a;\n\n    var _this = this;\n\n    if (!stateValue) {\n      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n    }\n\n    switch (this.type) {\n      case 'parallel':\n        return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n        });\n\n      case 'compound':\n        if (isString(stateValue)) {\n          var subStateNode = this.getStateNode(stateValue);\n\n          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {\n            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n          }\n\n          return stateValue;\n        }\n\n        if (!keys(stateValue).length) {\n          return this.initialStateValue || {};\n        }\n\n        return mapValues(stateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n        });\n\n      default:\n        return stateValue || EMPTY_OBJECT;\n    }\n  };\n\n  StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n    if (isStateId(stateIdentifier)) {\n      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n\n      if (!stateNode) {\n        throw new Error(\"Unable to find state node '\".concat(stateIdentifier, \"'\"));\n      }\n\n      return stateNode.path;\n    }\n\n    return toStatePath(stateIdentifier, this.delimiter);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n    get: function () {\n      var _a;\n\n      if (this.__cache.initialStateValue) {\n        return this.__cache.initialStateValue;\n      }\n\n      var initialStateValue;\n\n      if (this.type === 'parallel') {\n        initialStateValue = mapFilterValues(this.states, function (state) {\n          return state.initialStateValue || EMPTY_OBJECT;\n        }, function (stateNode) {\n          return !(stateNode.type === 'history');\n        });\n      } else if (this.initial !== undefined) {\n        if (!this.states[this.initial]) {\n          throw new Error(\"Initial state '\".concat(this.initial, \"' not found on '\").concat(this.key, \"'\"));\n        }\n\n        initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n      } else {\n        // The finite state value of a machine without child states is just an empty object\n        initialStateValue = {};\n      }\n\n      this.__cache.initialStateValue = initialStateValue;\n      return this.__cache.initialStateValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getInitialState = function (stateValue, context) {\n    var configuration = this.getStateNodes(stateValue);\n    return this.resolveTransition({\n      configuration: configuration,\n      entrySet: configuration,\n      exitSet: [],\n      transitions: [],\n      source: undefined,\n      actions: []\n    }, undefined, undefined, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialState\", {\n    /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */\n    get: function () {\n      this._init(); // TODO: this should be in the constructor (see note in constructor)\n\n\n      var initialStateValue = this.initialStateValue;\n\n      if (!initialStateValue) {\n        throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id, \"'.\"));\n      }\n\n      return this.getInitialState(initialStateValue);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"target\", {\n    /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */\n    get: function () {\n      var target;\n\n      if (this.type === 'history') {\n        var historyConfig = this.config;\n\n        if (isString(historyConfig.target)) {\n          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n        } else {\n          target = historyConfig.target;\n        }\n      }\n\n      return target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */\n\n  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n    if (resolve === void 0) {\n      resolve = true;\n    }\n\n    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n    get: function () {\n      var _this = this;\n\n      if (isLeafNode(this)) {\n        return [this];\n      } // Case when state node is compound but no initial state is defined\n\n\n      if (this.type === 'compound' && !this.initial) {\n        if (!IS_PRODUCTION) {\n          warn(false, \"Compound state node '\".concat(this.id, \"' has no initial state.\"));\n        }\n\n        return [this];\n      }\n\n      var initialStateNodePaths = toStatePaths(this.initialStateValue);\n      return flatten(initialStateNodePaths.map(function (initialPath) {\n        return _this.getFromRelativePath(initialPath);\n      }));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */\n\n  StateNode.prototype.getFromRelativePath = function (relativePath) {\n    if (!relativePath.length) {\n      return [this];\n    }\n\n    var _a = __read(relativePath),\n        stateKey = _a[0],\n        childStatePath = _a.slice(1);\n\n    if (!this.states) {\n      throw new Error(\"Cannot retrieve subPath '\".concat(stateKey, \"' from node with no states\"));\n    }\n\n    var childStateNode = this.getStateNode(stateKey);\n\n    if (childStateNode.type === 'history') {\n      return childStateNode.resolveHistory();\n    }\n\n    if (!this.states[stateKey]) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return this.states[stateKey].getFromRelativePath(childStatePath);\n  };\n\n  StateNode.prototype.historyValue = function (relativeStateValue) {\n    if (!keys(this.states).length) {\n      return undefined;\n    }\n\n    return {\n      current: relativeStateValue || this.initialStateValue,\n      states: mapFilterValues(this.states, function (stateNode, key) {\n        if (!relativeStateValue) {\n          return stateNode.historyValue();\n        }\n\n        var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];\n        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n      }, function (stateNode) {\n        return !stateNode.history;\n      })\n    };\n  };\n  /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */\n\n\n  StateNode.prototype.resolveHistory = function (historyValue) {\n    var _this = this;\n\n    if (this.type !== 'history') {\n      return [this];\n    }\n\n    var parent = this.parent;\n\n    if (!historyValue) {\n      var historyTarget = this.target;\n      return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {\n        return parent.getFromRelativePath(relativeChildPath);\n      })) : parent.initialStateNodes;\n    }\n\n    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n\n    if (isString(subHistoryValue)) {\n      return [parent.getStateNode(subHistoryValue)];\n    }\n\n    return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {\n      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"stateIds\", {\n    /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var childStateIds = flatten(keys(this.states).map(function (stateKey) {\n        return _this.states[stateKey].stateIds;\n      }));\n      return [this.id].concat(childStateIds);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"events\", {\n    /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */\n    get: function () {\n      var e_7, _a, e_8, _b;\n\n      if (this.__cache.events) {\n        return this.__cache.events;\n      }\n\n      var states = this.states;\n      var events = new Set(this.ownEvents);\n\n      if (states) {\n        try {\n          for (var _c = __values(keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var stateId = _d.value;\n            var state = states[stateId];\n\n            if (state.states) {\n              try {\n                for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                  var event_1 = _f.value;\n                  events.add(\"\".concat(event_1));\n                }\n              } catch (e_8_1) {\n                e_8 = {\n                  error: e_8_1\n                };\n              } finally {\n                try {\n                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                } finally {\n                  if (e_8) throw e_8.error;\n                }\n              }\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n      }\n\n      return this.__cache.events = Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n    /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */\n    get: function () {\n      var events = new Set(this.transitions.filter(function (transition) {\n        return !(!transition.target && !transition.actions.length && transition.internal);\n      }).map(function (transition) {\n        return transition.eventType;\n      }));\n      return Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.resolveTarget = function (_target) {\n    var _this = this;\n\n    if (_target === undefined) {\n      // an undefined target signals that the state node should not transition from that state when receiving that event\n      return undefined;\n    }\n\n    return _target.map(function (target) {\n      if (!isString(target)) {\n        return target;\n      }\n\n      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n      // do not include machine key on target\n\n      if (isInternalTarget && !_this.parent) {\n        return _this.getStateNodeByPath(target.slice(1));\n      }\n\n      var resolvedTarget = isInternalTarget ? _this.key + target : target;\n\n      if (_this.parent) {\n        try {\n          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n\n          return targetStateNode;\n        } catch (err) {\n          throw new Error(\"Invalid transition definition for state node '\".concat(_this.id, \"':\\n\").concat(err.message));\n        }\n      } else {\n        return _this.getStateNodeByPath(resolvedTarget);\n      }\n    });\n  };\n\n  StateNode.prototype.formatTransition = function (transitionConfig) {\n    var _this = this;\n\n    var normalizedTarget = normalizeTarget(transitionConfig.target);\n    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {\n      return isString(_target) && _target[0] === _this.delimiter;\n    }) : true;\n    var guards = this.machine.options.guards;\n    var target = this.resolveTarget(normalizedTarget);\n\n    var transition = __assign(__assign({}, transitionConfig), {\n      actions: toActionObjects(toArray(transitionConfig.actions)),\n      cond: toGuard(transitionConfig.cond, guards),\n      target: target,\n      source: this,\n      internal: internal,\n      eventType: transitionConfig.event,\n      toJSON: function () {\n        return __assign(__assign({}, transition), {\n          target: transition.target ? transition.target.map(function (t) {\n            return \"#\".concat(t.id);\n          }) : undefined,\n          source: \"#\".concat(_this.id)\n        });\n      }\n    });\n\n    return transition;\n  };\n\n  StateNode.prototype.formatTransitions = function () {\n    var e_9, _a;\n\n    var _this = this;\n\n    var onConfig;\n\n    if (!this.config.on) {\n      onConfig = [];\n    } else if (Array.isArray(this.config.on)) {\n      onConfig = this.config.on;\n    } else {\n      var _b = this.config.on,\n          _c = WILDCARD,\n          _d = _b[_c],\n          wildcardConfigs = _d === void 0 ? [] : _d,\n          strictTransitionConfigs_1 = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      onConfig = flatten(keys(strictTransitionConfigs_1).map(function (key) {\n        if (!IS_PRODUCTION && key === NULL_EVENT) {\n          warn(false, \"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \" + \"Please check the `on` configuration for \\\"#\".concat(_this.id, \"\\\".\"));\n        }\n\n        var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);\n\n        if (!IS_PRODUCTION) {\n          validateArrayifiedTransitions(_this, key, transitionConfigArray);\n        }\n\n        return transitionConfigArray;\n      }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));\n    }\n\n    var eventlessConfig = this.config.always ? toTransitionConfigArray('', this.config.always) : [];\n    var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];\n\n    if (!IS_PRODUCTION) {\n      warn(!(this.config.onDone && !this.parent), \"Root nodes cannot have an \\\".onDone\\\" transition. Please check the config of \\\"\".concat(this.id, \"\\\".\"));\n    }\n\n    var invokeConfig = flatten(this.invoke.map(function (invokeDef) {\n      var settleTransitions = [];\n\n      if (invokeDef.onDone) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));\n      }\n\n      if (invokeDef.onError) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)), false));\n      }\n\n      return settleTransitions;\n    }));\n    var delayedTransitions = this.after;\n    var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function (transitionConfig) {\n      return toArray(transitionConfig).map(function (transition) {\n        return _this.formatTransition(transition);\n      });\n    }));\n\n    try {\n      for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {\n        var delayedTransition = delayedTransitions_1_1.value;\n        formattedTransitions.push(delayedTransition);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return formattedTransitions;\n  };\n\n  return StateNode;\n}();\n\nexport { StateNode };","map":{"version":3,"sources":["/Users/angelinadeo/thehacktrical/NYUhack/node_modules/xstate/es/StateNode.js"],"names":["__assign","__spreadArray","__read","__values","__rest","STATE_DELIMITER","IS_PRODUCTION","isFunction","mapValues","isArray","flatten","keys","toArray","toStateValue","isString","getEventType","toSCXMLEvent","matchesState","path","evaluateGuard","mapContext","pathToStateValue","isBuiltInEvent","partition","updateHistoryValue","toStatePath","mapFilterValues","warn","toStatePaths","nestedPath","normalizeTarget","toGuard","toTransitionConfigArray","isMachine","createInvokeId","SpecialTargets","getAllStateNodes","getConfiguration","isInFinalState","getTagsFromConfiguration","has","getChildren","getValue","isLeafNode","start","start$1","stop","stop$1","invoke","update","nullEvent","raise","raise$1","send","send$1","done","toActionObjects","resolveActions","doneInvoke","error","toActionObject","toActivityDefinition","after","cancel","initEvent","State","stateValuesEqual","createInvocableActor","toInvokeDefinition","NULL_EVENT","STATE_IDENTIFIER","WILDCARD","EMPTY_OBJECT","isStateId","str","createDefaultOptions","actions","guards","services","activities","delays","validateArrayifiedTransitions","stateNode","event","transitions","hasNonLastUnguardedTarget","slice","some","transition","target","eventText","concat","id","StateNode","config","options","_context","_this","context","undefined","_a","order","__xstatenode","__cache","events","relativeValue","Map","initialStateValue","initialState","on","candidates","delayedTransitions","idMap","tags","Object","assign","parent","_parent","key","_key","machine","delimiter","join","version","type","parallel","states","length","history","schema","description","initial","stateConfig","dfs","e_1","_b","_c","next","child","value","e_1_1","return","call","_transient","always","Array","strict","onEntry","entry","map","action","onExit","exit","meta","doneData","data","invokeConfig","i","invokeId","src","invokeSource","activity","bind","prototype","_init","forEach","withConfig","withContext","defineProperty","get","enumerable","configurable","state","definition","toJSON","reduce","eventType","push","getDelayedTransitions","formatTransitions","getCandidates","eventName","transient","filter","sameEventType","afterConfig","mutateEntryExit","delay","delayRef","configTransition","resolvedTransition","resolvedDelay","isNaN","delayedTransition","formatTransition","getStateNodes","stateValue","getStateNode","subStateKeys","subStateNodes","apply","subStateKey","handles","includes","resolveState","configuration","from","resolve","transitionLeafNode","_event","transitionCompoundNode","_transition","transitionParallelNode","e_2","transitionMap","subStateValue","subStateNode","e_2_1","stateTransitions","enabledTransitions","st","willTransition","entryNodes","t","entrySet","exitSet","source","getTransitionData","e_3","name","nextStateNodes","selectedTransition","candidate","cond","stateIn","in","resolvedContext","isInState","matches","getStateNodeById","guardPassed","err","Error","message","e_3_1","allNextStateNodes","getRelativeStateNodes","historyValue","isInternal","internal","reentryNodes","n","nodesFromChild","childStateNode","escapes","nodes","marker","getActions","currentContext","prevState","e_4","e_5","prevConfig","resolvedConfig","resolvedConfig_1","resolvedConfig_1_1","sn","e_4_1","prevConfig_1","prevConfig_1_1","e_5_1","doneEvents","grandparent","every","parentNode","sort","a","b","entryStates","Set","exitStates","entryActions","exitActions","currentState","resolvedStateValue","getResolvedPath","stateTransition","resolveTransition","resolveRaisedTransition","originalEvent","currentActions","unshift","e_6","actions_1","actions_1_1","e_6_1","preserveActionOrder","resolvedActions","updatedContext","to","Internal","raisedEvents","nonRaisedActions","invokeActions","children","acc","resolvedConfiguration","isDone","nextState","_sessionid","didUpdateContext","changed","isTransient","maybeNextState","raisedEvent","shift","stateKey","result","stateId","resolvedStateId","getStateNodeByPath","statePath","e","arrayStatePath","currentStateNode","stateIdentifier","getInitialState","historyConfig","relativeStateId","resolveHistory","initialStateNodes","initialStateNodePaths","initialPath","getFromRelativePath","relativePath","childStatePath","relativeStateValue","current","historyTarget","relativeChildPath","subHistoryValue","subStatePath","childStateIds","stateIds","e_7","e_8","ownEvents","_d","_e","_f","event_1","add","e_8_1","e_7_1","resolveTarget","_target","isInternalTarget","resolvedTarget","targetStateNode","transitionConfig","normalizedTarget","e_9","onConfig","wildcardConfigs","strictTransitionConfigs_1","transitionConfigArray","eventlessConfig","doneConfig","onDone","String","invokeDef","settleTransitions","onError","formattedTransitions","delayedTransitions_1","delayedTransitions_1_1","e_9_1"],"mappings":"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","sourcesContent":["import { __assign, __spreadArray, __read, __values, __rest } from './_virtual/_tslib.js';\nimport { STATE_DELIMITER } from './constants.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { isFunction, mapValues, isArray, flatten, keys, toArray, toStateValue, isString, getEventType, toSCXMLEvent, matchesState, path, evaluateGuard, mapContext, pathToStateValue, isBuiltInEvent, partition, updateHistoryValue, toStatePath, mapFilterValues, warn, toStatePaths, nestedPath, normalizeTarget, toGuard, toTransitionConfigArray, isMachine, createInvokeId } from './utils.js';\nimport { SpecialTargets } from './types.js';\nimport { getAllStateNodes, getConfiguration, isInFinalState, getTagsFromConfiguration, has, getChildren, getValue, isLeafNode } from './stateUtils.js';\nimport { start as start$1, stop as stop$1, invoke, update, nullEvent, raise as raise$1, send as send$1 } from './actionTypes.js';\nimport { done, start, raise, stop, toActionObjects, resolveActions, doneInvoke, error, toActionObject, toActivityDefinition, after, send, cancel, initEvent } from './actions.js';\nimport { State, stateValuesEqual } from './State.js';\nimport { createInvocableActor } from './Actor.js';\nimport { toInvokeDefinition } from './invokeUtils.js';\n\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\nvar WILDCARD = '*';\nvar EMPTY_OBJECT = {};\n\nvar isStateId = function (str) {\n  return str[0] === STATE_IDENTIFIER;\n};\n\nvar createDefaultOptions = function () {\n  return {\n    actions: {},\n    guards: {},\n    services: {},\n    activities: {},\n    delays: {}\n  };\n};\n\nvar validateArrayifiedTransitions = function (stateNode, event, transitions) {\n  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {\n    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));\n  });\n  var eventText = event === NULL_EVENT ? 'the transient event' : \"event '\".concat(event, \"'\");\n  warn(!hasNonLastUnguardedTarget, \"One or more transitions for \".concat(eventText, \" on state '\").concat(stateNode.id, \"' are unreachable. \") + \"Make sure that the default transition is the last one defined.\");\n};\n\nvar StateNode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function StateNode(\n  /**\r\n   * The raw config used to create the machine.\r\n   */\n  config, options,\n  /**\r\n   * The initial extended state\r\n   */\n  _context // TODO: this is unsafe, but we're removing it in v5 anyway\n  ) {\n    var _this = this;\n\n    if (_context === void 0) {\n      _context = 'context' in config ? config.context : undefined;\n    }\n\n    var _a;\n\n    this.config = config;\n    this._context = _context;\n    /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */\n\n    this.order = -1;\n    this.__xstatenode = true;\n    this.__cache = {\n      events: undefined,\n      relativeValue: new Map(),\n      initialStateValue: undefined,\n      initialState: undefined,\n      on: undefined,\n      transitions: undefined,\n      candidates: {},\n      delayedTransitions: undefined\n    };\n    this.idMap = {};\n    this.tags = [];\n    this.options = Object.assign(createDefaultOptions(), options);\n    this.parent = this.options._parent;\n    this.key = this.config.key || this.options._key || this.config.id || '(machine)';\n    this.machine = this.parent ? this.parent.machine : this;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n    this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);\n    this.version = this.parent ? this.parent.version : this.config.version;\n    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};\n    this.description = this.config.description;\n\n    if (!IS_PRODUCTION) {\n      warn(!('parallel' in this.config), \"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \".concat(this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\".concat(this.type, \"'`\"), \" in the config for state node '\").concat(this.id, \"' instead.\"));\n    }\n\n    this.initial = this.config.initial;\n    this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {\n      var _a;\n\n      var stateNode = new StateNode(stateConfig, {\n        _parent: _this,\n        _key: key\n      });\n      Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n      return stateNode;\n    }) : EMPTY_OBJECT; // Document order\n\n    var order = 0;\n\n    function dfs(stateNode) {\n      var e_1, _a;\n\n      stateNode.order = order++;\n\n      try {\n        for (var _b = __values(getChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          dfs(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    dfs(this); // History config\n\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {\n      var event = _a.event;\n      return event === NULL_EVENT;\n    }) : NULL_EVENT in this.config.on);\n    this.strict = !!this.config.strict; // TODO: deprecate (entry)\n\n    this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {\n      return toActionObject(action);\n    }); // TODO: deprecate (exit)\n\n    this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {\n      return toActionObject(action);\n    });\n    this.meta = this.config.meta;\n    this.doneData = this.type === 'final' ? this.config.data : undefined;\n    this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {\n      var _a, _b;\n\n      if (isMachine(invokeConfig)) {\n        var invokeId = createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);\n        return toInvokeDefinition({\n          src: invokeId,\n          id: invokeId\n        });\n      } else if (isString(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        return toInvokeDefinition(__assign(__assign({}, invokeConfig), {\n          id: invokeId,\n          src: invokeConfig.src\n        }));\n      } else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);\n        return toInvokeDefinition(__assign(__assign({\n          id: invokeId\n        }, invokeConfig), {\n          src: invokeId\n        }));\n      } else {\n        var invokeSource = invokeConfig.src;\n        return toInvokeDefinition(__assign(__assign({\n          id: createInvokeId(_this.id, i)\n        }, invokeConfig), {\n          src: invokeSource\n        }));\n      }\n    });\n    this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {\n      return toActivityDefinition(activity);\n    });\n    this.transition = this.transition.bind(this);\n    this.tags = toArray(this.config.tags); // TODO: this is the real fix for initialization once\n    // state node getters are deprecated\n    // if (!this.parent) {\n    //   this._init();\n    // }\n  }\n\n  StateNode.prototype._init = function () {\n    if (this.__cache.transitions) {\n      return;\n    }\n\n    getAllStateNodes(this).forEach(function (stateNode) {\n      return stateNode.on;\n    });\n  };\n  /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */\n\n\n  StateNode.prototype.withConfig = function (options, context) {\n    var _a = this.options,\n        actions = _a.actions,\n        activities = _a.activities,\n        guards = _a.guards,\n        services = _a.services,\n        delays = _a.delays;\n    return new StateNode(this.config, {\n      actions: __assign(__assign({}, actions), options.actions),\n      activities: __assign(__assign({}, activities), options.activities),\n      guards: __assign(__assign({}, guards), options.guards),\n      services: __assign(__assign({}, services), options.services),\n      delays: __assign(__assign({}, delays), options.delays)\n    }, context !== null && context !== void 0 ? context : this.context);\n  };\n  /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */\n\n\n  StateNode.prototype.withContext = function (context) {\n    return new StateNode(this.config, this.options, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"context\", {\n    get: function () {\n      return isFunction(this._context) ? this._context() : this._context;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"definition\", {\n    /**\r\n     * The well-structured state node definition.\r\n     */\n    get: function () {\n      return {\n        id: this.id,\n        key: this.key,\n        version: this.version,\n        context: this.context,\n        type: this.type,\n        initial: this.initial,\n        history: this.history,\n        states: mapValues(this.states, function (state) {\n          return state.definition;\n        }),\n        on: this.on,\n        transitions: this.transitions,\n        entry: this.onEntry,\n        exit: this.onExit,\n        activities: this.activities || [],\n        meta: this.meta,\n        order: this.order || -1,\n        data: this.doneData,\n        invoke: this.invoke,\n        description: this.description,\n        tags: this.tags\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.toJSON = function () {\n    return this.definition;\n  };\n\n  Object.defineProperty(StateNode.prototype, \"on\", {\n    /**\r\n     * The mapping of events to transitions.\r\n     */\n    get: function () {\n      if (this.__cache.on) {\n        return this.__cache.on;\n      }\n\n      var transitions = this.transitions;\n      return this.__cache.on = transitions.reduce(function (map, transition) {\n        map[transition.eventType] = map[transition.eventType] || [];\n        map[transition.eventType].push(transition);\n        return map;\n      }, {});\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"after\", {\n    get: function () {\n      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"transitions\", {\n    /**\r\n     * All the transitions that can be taken from this state node.\r\n     */\n    get: function () {\n      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getCandidates = function (eventName) {\n    if (this.__cache.candidates[eventName]) {\n      return this.__cache.candidates[eventName];\n    }\n\n    var transient = eventName === NULL_EVENT;\n    var candidates = this.transitions.filter(function (transition) {\n      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n\n      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n    });\n    this.__cache.candidates[eventName] = candidates;\n    return candidates;\n  };\n  /**\r\n   * All delayed transitions from the config.\r\n   */\n\n\n  StateNode.prototype.getDelayedTransitions = function () {\n    var _this = this;\n\n    var afterConfig = this.config.after;\n\n    if (!afterConfig) {\n      return [];\n    }\n\n    var mutateEntryExit = function (delay, i) {\n      var delayRef = isFunction(delay) ? \"\".concat(_this.id, \":delay[\").concat(i, \"]\") : delay;\n      var eventType = after(delayRef, _this.id);\n\n      _this.onEntry.push(send(eventType, {\n        delay: delay\n      }));\n\n      _this.onExit.push(cancel(eventType));\n\n      return eventType;\n    };\n\n    var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {\n      var eventType = mutateEntryExit(transition.delay, i);\n      return __assign(__assign({}, transition), {\n        event: eventType\n      });\n    }) : flatten(keys(afterConfig).map(function (delay, i) {\n      var configTransition = afterConfig[delay];\n      var resolvedTransition = isString(configTransition) ? {\n        target: configTransition\n      } : configTransition;\n      var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n      var eventType = mutateEntryExit(resolvedDelay, i);\n      return toArray(resolvedTransition).map(function (transition) {\n        return __assign(__assign({}, transition), {\n          event: eventType,\n          delay: resolvedDelay\n        });\n      });\n    }));\n    return delayedTransitions.map(function (delayedTransition) {\n      var delay = delayedTransition.delay;\n      return __assign(__assign({}, _this.formatTransition(delayedTransition)), {\n        delay: delay\n      });\n    });\n  };\n  /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */\n\n\n  StateNode.prototype.getStateNodes = function (state) {\n    var _a;\n\n    var _this = this;\n\n    if (!state) {\n      return [];\n    }\n\n    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);\n\n    if (isString(stateValue)) {\n      var initialStateValue = this.getStateNode(stateValue).initial;\n      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];\n    }\n\n    var subStateKeys = keys(stateValue);\n    var subStateNodes = [this];\n    subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function (subStateKey) {\n      return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n    }))), false));\n    return subStateNodes;\n  };\n  /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */\n\n\n  StateNode.prototype.handles = function (event) {\n    var eventType = getEventType(event);\n    return this.events.includes(eventType);\n  };\n  /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */\n\n\n  StateNode.prototype.resolveState = function (state) {\n    var configuration = Array.from(getConfiguration([], this.getStateNodes(state.value)));\n    return new State(__assign(__assign({}, state), {\n      value: this.resolve(state.value),\n      configuration: configuration,\n      done: isInFinalState(configuration, this),\n      tags: getTagsFromConfiguration(configuration)\n    }));\n  };\n\n  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {\n    var stateNode = this.getStateNode(stateValue);\n    var next = stateNode.next(state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {\n    var subStateKeys = keys(stateValue);\n    var stateNode = this.getStateNode(subStateKeys[0]);\n\n    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {\n    var e_2, _a;\n\n    var transitionMap = {};\n\n    try {\n      for (var _b = __values(keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var subStateKey = _c.value;\n        var subStateValue = stateValue[subStateKey];\n\n        if (!subStateValue) {\n          continue;\n        }\n\n        var subStateNode = this.getStateNode(subStateKey);\n\n        var next = subStateNode._transition(subStateValue, state, _event);\n\n        if (next) {\n          transitionMap[subStateKey] = next;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var stateTransitions = keys(transitionMap).map(function (key) {\n      return transitionMap[key];\n    });\n    var enabledTransitions = flatten(stateTransitions.map(function (st) {\n      return st.transitions;\n    }));\n    var willTransition = stateTransitions.some(function (st) {\n      return st.transitions.length > 0;\n    });\n\n    if (!willTransition) {\n      return this.next(state, _event);\n    }\n\n    var entryNodes = flatten(stateTransitions.map(function (t) {\n      return t.entrySet;\n    }));\n    var configuration = flatten(keys(transitionMap).map(function (key) {\n      return transitionMap[key].configuration;\n    }));\n    return {\n      transitions: enabledTransitions,\n      entrySet: entryNodes,\n      exitSet: flatten(stateTransitions.map(function (t) {\n        return t.exitSet;\n      })),\n      configuration: configuration,\n      source: state,\n      actions: flatten(keys(transitionMap).map(function (key) {\n        return transitionMap[key].actions;\n      }))\n    };\n  };\n\n  StateNode.prototype._transition = function (stateValue, state, _event) {\n    // leaf node\n    if (isString(stateValue)) {\n      return this.transitionLeafNode(stateValue, state, _event);\n    } // hierarchical node\n\n\n    if (keys(stateValue).length === 1) {\n      return this.transitionCompoundNode(stateValue, state, _event);\n    } // orthogonal node\n\n\n    return this.transitionParallelNode(stateValue, state, _event);\n  };\n\n  StateNode.prototype.getTransitionData = function (state, event) {\n    return this._transition(state.value, state, toSCXMLEvent(event));\n  };\n\n  StateNode.prototype.next = function (state, _event) {\n    var e_3, _a;\n\n    var _this = this;\n\n    var eventName = _event.name;\n    var actions = [];\n    var nextStateNodes = [];\n    var selectedTransition;\n\n    try {\n      for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var candidate = _c.value;\n        var cond = candidate.cond,\n            stateIn = candidate.in;\n        var resolvedContext = state.context;\n        var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID\n        state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent\n        matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;\n        var guardPassed = false;\n\n        try {\n          guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);\n        } catch (err) {\n          throw new Error(\"Unable to evaluate guard '\".concat(cond.name || cond.type, \"' in transition for event '\").concat(eventName, \"' in state node '\").concat(this.id, \"':\\n\").concat(err.message));\n        }\n\n        if (guardPassed && isInState) {\n          if (candidate.target !== undefined) {\n            nextStateNodes = candidate.target;\n          }\n\n          actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));\n          selectedTransition = candidate;\n          break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (!selectedTransition) {\n      return undefined;\n    }\n\n    if (!nextStateNodes.length) {\n      return {\n        transitions: [selectedTransition],\n        entrySet: [],\n        exitSet: [],\n        configuration: state.value ? [this] : [],\n        source: state,\n        actions: actions\n      };\n    }\n\n    var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {\n      return _this.getRelativeStateNodes(stateNode, state.historyValue);\n    }));\n    var isInternal = !!selectedTransition.internal;\n    var reentryNodes = isInternal ? [] : flatten(allNextStateNodes.map(function (n) {\n      return _this.nodesFromChild(n);\n    }));\n    return {\n      transitions: [selectedTransition],\n      entrySet: reentryNodes,\n      exitSet: isInternal ? [] : [this],\n      configuration: allNextStateNodes,\n      source: state,\n      actions: actions\n    };\n  };\n\n  StateNode.prototype.nodesFromChild = function (childStateNode) {\n    if (childStateNode.escapes(this)) {\n      return [];\n    }\n\n    var nodes = [];\n    var marker = childStateNode;\n\n    while (marker && marker !== this) {\n      nodes.push(marker);\n      marker = marker.parent;\n    }\n\n    nodes.push(this); // inclusive\n\n    return nodes;\n  };\n  /**\r\n   * Whether the given state node \"escapes\" this state node. If the `stateNode` is equal to or the parent of\r\n   * this state node, it does not escape.\r\n   */\n\n\n  StateNode.prototype.escapes = function (stateNode) {\n    if (this === stateNode) {\n      return false;\n    }\n\n    var parent = this.parent;\n\n    while (parent) {\n      if (parent === stateNode) {\n        return false;\n      }\n\n      parent = parent.parent;\n    }\n\n    return true;\n  };\n\n  StateNode.prototype.getActions = function (transition, currentContext, _event, prevState) {\n    var e_4, _a, e_5, _b;\n\n    var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);\n    var resolvedConfig = transition.configuration.length ? getConfiguration(prevConfig, transition.configuration) : prevConfig;\n\n    try {\n      for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {\n        var sn = resolvedConfig_1_1.value;\n\n        if (!has(prevConfig, sn)) {\n          transition.entrySet.push(sn);\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    try {\n      for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {\n        var sn = prevConfig_1_1.value;\n\n        if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {\n          transition.exitSet.push(sn);\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    var doneEvents = flatten(transition.entrySet.map(function (sn) {\n      var events = [];\n\n      if (sn.type !== 'final') {\n        return events;\n      }\n\n      var parent = sn.parent;\n\n      if (!parent.parent) {\n        return events;\n      }\n\n      events.push(done(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.\n      done(parent.id, sn.doneData ? mapContext(sn.doneData, currentContext, _event) : undefined));\n      var grandparent = parent.parent;\n\n      if (grandparent.type === 'parallel') {\n        if (getChildren(grandparent).every(function (parentNode) {\n          return isInFinalState(transition.configuration, parentNode);\n        })) {\n          events.push(done(grandparent.id));\n        }\n      }\n\n      return events;\n    }));\n    transition.exitSet.sort(function (a, b) {\n      return b.order - a.order;\n    });\n    transition.entrySet.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    var entryStates = new Set(transition.entrySet);\n    var exitStates = new Set(transition.exitSet);\n\n    var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.activities.map(function (activity) {\n        return start(activity);\n      })), false), __read(stateNode.onEntry), false);\n    })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function (activity) {\n        return stop(activity);\n      })), false);\n    }))], 2),\n        entryActions = _c[0],\n        exitActions = _c[1];\n\n    var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);\n    return actions;\n  };\n  /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */\n\n\n  StateNode.prototype.transition = function (state, event, context) {\n    if (state === void 0) {\n      state = this.initialState;\n    }\n\n    var _event = toSCXMLEvent(event);\n\n    var currentState;\n\n    if (state instanceof State) {\n      currentState = context === undefined ? state : this.resolveState(State.from(state, context));\n    } else {\n      var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);\n      var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;\n      currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));\n    }\n\n    if (!IS_PRODUCTION && _event.name === WILDCARD) {\n      throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD, \"')\"));\n    }\n\n    if (this.strict) {\n      if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {\n        throw new Error(\"Machine '\".concat(this.id, \"' does not accept event '\").concat(_event.name, \"'\"));\n      }\n    }\n\n    var stateTransition = this._transition(currentState.value, currentState, _event) || {\n      transitions: [],\n      configuration: [],\n      entrySet: [],\n      exitSet: [],\n      source: currentState,\n      actions: []\n    };\n    var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));\n    var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;\n    stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);\n    return this.resolveTransition(stateTransition, currentState, _event);\n  };\n\n  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {\n    var _a;\n\n    var currentActions = state.actions;\n    state = this.transition(state, _event); // Save original event to state\n    // TODO: this should be the raised event! Delete in V5 (breaking)\n\n    state._event = originalEvent;\n    state.event = originalEvent.data;\n\n    (_a = state.actions).unshift.apply(_a, __spreadArray([], __read(currentActions), false));\n\n    return state;\n  };\n\n  StateNode.prototype.resolveTransition = function (stateTransition, currentState, _event, context) {\n    var e_6, _a;\n\n    var _this = this;\n\n    if (_event === void 0) {\n      _event = initEvent;\n    }\n\n    if (context === void 0) {\n      context = this.machine.context;\n    }\n\n    var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n    // - this is the initial state (there is no current state)\n    // - OR there are transitions\n\n    var willTransition = !currentState || stateTransition.transitions.length > 0;\n    var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;\n    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n    var currentContext = currentState ? currentState.context : context;\n    var actions = this.getActions(stateTransition, currentContext, _event, currentState);\n    var activities = currentState ? __assign({}, currentState.activities) : {};\n\n    try {\n      for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\n        var action = actions_1_1.value;\n\n        if (action.type === start$1) {\n          activities[action.activity.id || action.activity.type] = action;\n        } else if (action.type === stop$1) {\n          activities[action.activity.id || action.activity.type] = false;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    var _b = __read(resolveActions(this, currentState, currentContext, _event, actions, this.machine.config.preserveActionOrder), 2),\n        resolvedActions = _b[0],\n        updatedContext = _b[1];\n\n    var _c = __read(partition(resolvedActions, function (action) {\n      return action.type === raise$1 || action.type === send$1 && action.to === SpecialTargets.Internal;\n    }), 2),\n        raisedEvents = _c[0],\n        nonRaisedActions = _c[1];\n\n    var invokeActions = resolvedActions.filter(function (action) {\n      var _a;\n\n      return action.type === start$1 && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke;\n    });\n    var children = invokeActions.reduce(function (acc, action) {\n      acc[action.activity.id] = createInvocableActor(action.activity, _this.machine, updatedContext, _event);\n      return acc;\n    }, currentState ? __assign({}, currentState.children) : {});\n    var resolvedConfiguration = resolvedStateValue ? stateTransition.configuration : currentState ? currentState.configuration : [];\n    var isDone = isInFinalState(resolvedConfiguration, this);\n    var nextState = new State({\n      value: resolvedStateValue || currentState.value,\n      context: updatedContext,\n      _event: _event,\n      // Persist _sessionid between states\n      _sessionid: currentState ? currentState._sessionid : null,\n      historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n      actions: resolvedStateValue ? nonRaisedActions : [],\n      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n      events: [],\n      configuration: resolvedConfiguration,\n      transitions: stateTransition.transitions,\n      children: children,\n      done: isDone,\n      tags: currentState === null || currentState === void 0 ? void 0 : currentState.tags,\n      machine: this\n    });\n    var didUpdateContext = currentContext !== updatedContext;\n    nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n\n    var history = nextState.history;\n\n    if (history) {\n      delete history.history;\n    } // There are transient transitions if the machine is not in a final state\n    // and if some of the state nodes have transient (\"always\") transitions.\n\n\n    var isTransient = !isDone && (this._transient || configuration.some(function (stateNode) {\n      return stateNode._transient;\n    })); // If there are no enabled transitions, check if there are transient transitions.\n    // If there are transient transitions, continue checking for more transitions\n    // because an transient transition should be triggered even if there are no\n    // enabled transitions.\n    //\n    // If we're already working on an transient transition (by checking\n    // if the event is a NULL_EVENT), then stop to prevent an infinite loop.\n    //\n    // Otherwise, if there are no enabled nor transient transitions, we are done.\n\n    if (!willTransition && (!isTransient || _event.name === NULL_EVENT)) {\n      return nextState;\n    }\n\n    var maybeNextState = nextState;\n\n    if (!isDone) {\n      if (isTransient) {\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n          type: nullEvent\n        }, _event);\n      }\n\n      while (raisedEvents.length) {\n        var raisedEvent = raisedEvents.shift();\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);\n      }\n    } // Detect if state changed\n\n\n    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);\n    maybeNextState.changed = changed; // Preserve original history after raised events\n\n    maybeNextState.history = history;\n    maybeNextState.tags = getTagsFromConfiguration(maybeNextState.configuration);\n    return maybeNextState;\n  };\n  /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */\n\n\n  StateNode.prototype.getStateNode = function (stateKey) {\n    if (isStateId(stateKey)) {\n      return this.machine.getStateNodeById(stateKey);\n    }\n\n    if (!this.states) {\n      throw new Error(\"Unable to retrieve child state '\".concat(stateKey, \"' from '\").concat(this.id, \"'; no child states exist.\"));\n    }\n\n    var result = this.states[stateKey];\n\n    if (!result) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return result;\n  };\n  /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */\n\n\n  StateNode.prototype.getStateNodeById = function (stateId) {\n    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n\n    if (resolvedStateId === this.id) {\n      return this;\n    }\n\n    var stateNode = this.machine.idMap[resolvedStateId];\n\n    if (!stateNode) {\n      throw new Error(\"Child state node '#\".concat(resolvedStateId, \"' does not exist on machine '\").concat(this.id, \"'\"));\n    }\n\n    return stateNode;\n  };\n  /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */\n\n\n  StateNode.prototype.getStateNodeByPath = function (statePath) {\n    if (typeof statePath === 'string' && isStateId(statePath)) {\n      try {\n        return this.getStateNodeById(statePath.slice(1));\n      } catch (e) {// try individual paths\n        // throw e;\n      }\n    }\n\n    var arrayStatePath = toStatePath(statePath, this.delimiter).slice();\n    var currentStateNode = this;\n\n    while (arrayStatePath.length) {\n      var key = arrayStatePath.shift();\n\n      if (!key.length) {\n        break;\n      }\n\n      currentStateNode = currentStateNode.getStateNode(key);\n    }\n\n    return currentStateNode;\n  };\n  /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */\n\n\n  StateNode.prototype.resolve = function (stateValue) {\n    var _a;\n\n    var _this = this;\n\n    if (!stateValue) {\n      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n    }\n\n    switch (this.type) {\n      case 'parallel':\n        return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n        });\n\n      case 'compound':\n        if (isString(stateValue)) {\n          var subStateNode = this.getStateNode(stateValue);\n\n          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {\n            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n          }\n\n          return stateValue;\n        }\n\n        if (!keys(stateValue).length) {\n          return this.initialStateValue || {};\n        }\n\n        return mapValues(stateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n        });\n\n      default:\n        return stateValue || EMPTY_OBJECT;\n    }\n  };\n\n  StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n    if (isStateId(stateIdentifier)) {\n      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n\n      if (!stateNode) {\n        throw new Error(\"Unable to find state node '\".concat(stateIdentifier, \"'\"));\n      }\n\n      return stateNode.path;\n    }\n\n    return toStatePath(stateIdentifier, this.delimiter);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n    get: function () {\n      var _a;\n\n      if (this.__cache.initialStateValue) {\n        return this.__cache.initialStateValue;\n      }\n\n      var initialStateValue;\n\n      if (this.type === 'parallel') {\n        initialStateValue = mapFilterValues(this.states, function (state) {\n          return state.initialStateValue || EMPTY_OBJECT;\n        }, function (stateNode) {\n          return !(stateNode.type === 'history');\n        });\n      } else if (this.initial !== undefined) {\n        if (!this.states[this.initial]) {\n          throw new Error(\"Initial state '\".concat(this.initial, \"' not found on '\").concat(this.key, \"'\"));\n        }\n\n        initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n      } else {\n        // The finite state value of a machine without child states is just an empty object\n        initialStateValue = {};\n      }\n\n      this.__cache.initialStateValue = initialStateValue;\n      return this.__cache.initialStateValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getInitialState = function (stateValue, context) {\n    var configuration = this.getStateNodes(stateValue);\n    return this.resolveTransition({\n      configuration: configuration,\n      entrySet: configuration,\n      exitSet: [],\n      transitions: [],\n      source: undefined,\n      actions: []\n    }, undefined, undefined, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialState\", {\n    /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */\n    get: function () {\n      this._init(); // TODO: this should be in the constructor (see note in constructor)\n\n\n      var initialStateValue = this.initialStateValue;\n\n      if (!initialStateValue) {\n        throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id, \"'.\"));\n      }\n\n      return this.getInitialState(initialStateValue);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"target\", {\n    /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */\n    get: function () {\n      var target;\n\n      if (this.type === 'history') {\n        var historyConfig = this.config;\n\n        if (isString(historyConfig.target)) {\n          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n        } else {\n          target = historyConfig.target;\n        }\n      }\n\n      return target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */\n\n  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n    if (resolve === void 0) {\n      resolve = true;\n    }\n\n    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n    get: function () {\n      var _this = this;\n\n      if (isLeafNode(this)) {\n        return [this];\n      } // Case when state node is compound but no initial state is defined\n\n\n      if (this.type === 'compound' && !this.initial) {\n        if (!IS_PRODUCTION) {\n          warn(false, \"Compound state node '\".concat(this.id, \"' has no initial state.\"));\n        }\n\n        return [this];\n      }\n\n      var initialStateNodePaths = toStatePaths(this.initialStateValue);\n      return flatten(initialStateNodePaths.map(function (initialPath) {\n        return _this.getFromRelativePath(initialPath);\n      }));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */\n\n  StateNode.prototype.getFromRelativePath = function (relativePath) {\n    if (!relativePath.length) {\n      return [this];\n    }\n\n    var _a = __read(relativePath),\n        stateKey = _a[0],\n        childStatePath = _a.slice(1);\n\n    if (!this.states) {\n      throw new Error(\"Cannot retrieve subPath '\".concat(stateKey, \"' from node with no states\"));\n    }\n\n    var childStateNode = this.getStateNode(stateKey);\n\n    if (childStateNode.type === 'history') {\n      return childStateNode.resolveHistory();\n    }\n\n    if (!this.states[stateKey]) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return this.states[stateKey].getFromRelativePath(childStatePath);\n  };\n\n  StateNode.prototype.historyValue = function (relativeStateValue) {\n    if (!keys(this.states).length) {\n      return undefined;\n    }\n\n    return {\n      current: relativeStateValue || this.initialStateValue,\n      states: mapFilterValues(this.states, function (stateNode, key) {\n        if (!relativeStateValue) {\n          return stateNode.historyValue();\n        }\n\n        var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];\n        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n      }, function (stateNode) {\n        return !stateNode.history;\n      })\n    };\n  };\n  /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */\n\n\n  StateNode.prototype.resolveHistory = function (historyValue) {\n    var _this = this;\n\n    if (this.type !== 'history') {\n      return [this];\n    }\n\n    var parent = this.parent;\n\n    if (!historyValue) {\n      var historyTarget = this.target;\n      return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {\n        return parent.getFromRelativePath(relativeChildPath);\n      })) : parent.initialStateNodes;\n    }\n\n    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n\n    if (isString(subHistoryValue)) {\n      return [parent.getStateNode(subHistoryValue)];\n    }\n\n    return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {\n      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"stateIds\", {\n    /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var childStateIds = flatten(keys(this.states).map(function (stateKey) {\n        return _this.states[stateKey].stateIds;\n      }));\n      return [this.id].concat(childStateIds);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"events\", {\n    /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */\n    get: function () {\n      var e_7, _a, e_8, _b;\n\n      if (this.__cache.events) {\n        return this.__cache.events;\n      }\n\n      var states = this.states;\n      var events = new Set(this.ownEvents);\n\n      if (states) {\n        try {\n          for (var _c = __values(keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var stateId = _d.value;\n            var state = states[stateId];\n\n            if (state.states) {\n              try {\n                for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                  var event_1 = _f.value;\n                  events.add(\"\".concat(event_1));\n                }\n              } catch (e_8_1) {\n                e_8 = {\n                  error: e_8_1\n                };\n              } finally {\n                try {\n                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                } finally {\n                  if (e_8) throw e_8.error;\n                }\n              }\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n      }\n\n      return this.__cache.events = Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n    /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */\n    get: function () {\n      var events = new Set(this.transitions.filter(function (transition) {\n        return !(!transition.target && !transition.actions.length && transition.internal);\n      }).map(function (transition) {\n        return transition.eventType;\n      }));\n      return Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.resolveTarget = function (_target) {\n    var _this = this;\n\n    if (_target === undefined) {\n      // an undefined target signals that the state node should not transition from that state when receiving that event\n      return undefined;\n    }\n\n    return _target.map(function (target) {\n      if (!isString(target)) {\n        return target;\n      }\n\n      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n      // do not include machine key on target\n\n      if (isInternalTarget && !_this.parent) {\n        return _this.getStateNodeByPath(target.slice(1));\n      }\n\n      var resolvedTarget = isInternalTarget ? _this.key + target : target;\n\n      if (_this.parent) {\n        try {\n          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n\n          return targetStateNode;\n        } catch (err) {\n          throw new Error(\"Invalid transition definition for state node '\".concat(_this.id, \"':\\n\").concat(err.message));\n        }\n      } else {\n        return _this.getStateNodeByPath(resolvedTarget);\n      }\n    });\n  };\n\n  StateNode.prototype.formatTransition = function (transitionConfig) {\n    var _this = this;\n\n    var normalizedTarget = normalizeTarget(transitionConfig.target);\n    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {\n      return isString(_target) && _target[0] === _this.delimiter;\n    }) : true;\n    var guards = this.machine.options.guards;\n    var target = this.resolveTarget(normalizedTarget);\n\n    var transition = __assign(__assign({}, transitionConfig), {\n      actions: toActionObjects(toArray(transitionConfig.actions)),\n      cond: toGuard(transitionConfig.cond, guards),\n      target: target,\n      source: this,\n      internal: internal,\n      eventType: transitionConfig.event,\n      toJSON: function () {\n        return __assign(__assign({}, transition), {\n          target: transition.target ? transition.target.map(function (t) {\n            return \"#\".concat(t.id);\n          }) : undefined,\n          source: \"#\".concat(_this.id)\n        });\n      }\n    });\n\n    return transition;\n  };\n\n  StateNode.prototype.formatTransitions = function () {\n    var e_9, _a;\n\n    var _this = this;\n\n    var onConfig;\n\n    if (!this.config.on) {\n      onConfig = [];\n    } else if (Array.isArray(this.config.on)) {\n      onConfig = this.config.on;\n    } else {\n      var _b = this.config.on,\n          _c = WILDCARD,\n          _d = _b[_c],\n          wildcardConfigs = _d === void 0 ? [] : _d,\n          strictTransitionConfigs_1 = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      onConfig = flatten(keys(strictTransitionConfigs_1).map(function (key) {\n        if (!IS_PRODUCTION && key === NULL_EVENT) {\n          warn(false, \"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \" + \"Please check the `on` configuration for \\\"#\".concat(_this.id, \"\\\".\"));\n        }\n\n        var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);\n\n        if (!IS_PRODUCTION) {\n          validateArrayifiedTransitions(_this, key, transitionConfigArray);\n        }\n\n        return transitionConfigArray;\n      }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));\n    }\n\n    var eventlessConfig = this.config.always ? toTransitionConfigArray('', this.config.always) : [];\n    var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];\n\n    if (!IS_PRODUCTION) {\n      warn(!(this.config.onDone && !this.parent), \"Root nodes cannot have an \\\".onDone\\\" transition. Please check the config of \\\"\".concat(this.id, \"\\\".\"));\n    }\n\n    var invokeConfig = flatten(this.invoke.map(function (invokeDef) {\n      var settleTransitions = [];\n\n      if (invokeDef.onDone) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));\n      }\n\n      if (invokeDef.onError) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)), false));\n      }\n\n      return settleTransitions;\n    }));\n    var delayedTransitions = this.after;\n    var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function (transitionConfig) {\n      return toArray(transitionConfig).map(function (transition) {\n        return _this.formatTransition(transition);\n      });\n    }));\n\n    try {\n      for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {\n        var delayedTransition = delayedTransitions_1_1.value;\n        formattedTransitions.push(delayedTransition);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return formattedTransitions;\n  };\n\n  return StateNode;\n}();\n\nexport { StateNode };\n"]},"metadata":{},"sourceType":"module"}