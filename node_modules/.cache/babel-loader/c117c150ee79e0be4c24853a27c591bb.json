{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _tslib = require('./_virtual/_tslib.js');\n\nvar environment = require('./environment.js');\n\nvar utils = require('./utils.js');\n\nvar types = require('./types.js');\n\nvar actionTypes = require('./actionTypes.js');\n\nvar initEvent = /*#__PURE__*/utils.toSCXMLEvent({\n  type: actionTypes.init\n});\n\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\n\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (utils.isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (utils.isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = _tslib.__assign(_tslib.__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\n\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = utils.isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\n\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return _tslib.__assign(_tslib.__assign({\n    id: utils.isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\n\nfunction raise(event) {\n  if (!utils.isString(event)) {\n    return send(event, {\n      to: types.SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: actionTypes.raise,\n    event: event\n  };\n}\n\nfunction resolveRaise(action) {\n  return {\n    type: actionTypes.raise,\n    _event: utils.toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: actionTypes.send,\n    event: utils.isFunction(event) ? event : utils.toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : utils.isFunction(event) ? event.name : utils.getEventType(event)\n  };\n}\n\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = utils.toSCXMLEvent(utils.isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (utils.isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = utils.isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = utils.isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = utils.isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\n\nfunction sendParent(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\n\nfunction sendTo(actor, event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\n\nfunction sendUpdate() {\n  return sendParent(actionTypes.update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\n\nfunction respond(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: actionTypes.log,\n    label: label,\n    expr: expr\n  };\n}\n\nvar resolveLog = function (action, ctx, _event) {\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    value: utils.isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\n\nvar cancel = function (sendId) {\n  return {\n    type: actionTypes.cancel,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: types.ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\n\nfunction stop(actorRef) {\n  var activity = utils.isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: types.ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\n\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = utils.isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: types.ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\n\nvar assign = function (assignment) {\n  return {\n    type: actionTypes.assign,\n    assignment: assignment\n  };\n};\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(types.ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction done(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction error(id, data) {\n  var type = \"\".concat(types.ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction pure(getActions) {\n  return {\n    type: types.ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction forwardTo(target, options) {\n  return send(function (_, event) {\n    return event;\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: actionTypes.error,\n      data: utils.isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\n\nfunction choose(conds) {\n  return {\n    type: types.ActionTypes.Choose,\n    conds: conds\n  };\n}\n\nfunction resolveActions(machine, currentState, currentContext, _event, actions, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = _tslib.__read(preserveActionOrder ? [[], actions] : utils.partition(actions, function (action) {\n    return action.type === actionTypes.assign;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? utils.updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = utils.flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case actionTypes.raise:\n        return resolveRaise(actionObject);\n\n      case actionTypes.send:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!environment.IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          utils.warn(!utils.isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        return sendAction;\n\n      case actionTypes.log:\n        return resolveLog(actionObject, updatedContext, _event);\n\n      case actionTypes.choose:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = utils.toGuard(condition.cond, machine.options.guards);\n            return !guard || utils.evaluateGuard(machine, guard, updatedContext, _event, currentState);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(utils.toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case actionTypes.pure:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(utils.toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case actionTypes.stop:\n        {\n          return resolveStop(actionObject, updatedContext, _event);\n        }\n\n      case actionTypes.assign:\n        {\n          updatedContext = utils.updateContext(updatedContext, _event, [actionObject], currentState);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = _tslib.__assign(_tslib.__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, _tslib.__spreadArray([preservedContexts[contextIndex_1]], _tslib.__read(args), false));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexports.after = after;\nexports.assign = assign;\nexports.cancel = cancel;\nexports.choose = choose;\nexports.done = done;\nexports.doneInvoke = doneInvoke;\nexports.error = error;\nexports.escalate = escalate;\nexports.forwardTo = forwardTo;\nexports.getActionFunction = getActionFunction;\nexports.initEvent = initEvent;\nexports.log = log;\nexports.pure = pure;\nexports.raise = raise;\nexports.resolveActions = resolveActions;\nexports.resolveLog = resolveLog;\nexports.resolveRaise = resolveRaise;\nexports.resolveSend = resolveSend;\nexports.resolveStop = resolveStop;\nexports.respond = respond;\nexports.send = send;\nexports.sendParent = sendParent;\nexports.sendTo = sendTo;\nexports.sendUpdate = sendUpdate;\nexports.start = start;\nexports.stop = stop;\nexports.toActionObject = toActionObject;\nexports.toActionObjects = toActionObjects;\nexports.toActivityDefinition = toActivityDefinition;","map":{"version":3,"sources":["/Users/angelinadeo/thehacktrical/NYUhack/node_modules/xstate/lib/actions.js"],"names":["Object","defineProperty","exports","value","_tslib","require","environment","utils","types","actionTypes","initEvent","toSCXMLEvent","type","init","getActionFunction","actionType","actionFunctionMap","undefined","toActionObject","action","actionObject","isString","exec","isFunction","name","toString","__assign","toActionObjects","actions","isArray","map","subAction","toActivityDefinition","id","raise","event","send","to","SpecialTargets","Internal","resolveRaise","_event","options","toEventObject","delay","getEventType","resolveSend","ctx","delaysMap","meta","resolvedEvent","data","resolvedDelay","configDelay","resolvedTarget","sendParent","Parent","sendTo","actor","sendUpdate","update","respond","_","__","_a","origin","defaultLogExpr","context","log","expr","label","resolveLog","cancel","sendId","start","activity","activityDef","ActionTypes","Start","stop","actorRef","Stop","resolveStop","actorRefOrString","resolvedActorRef","assign","assignment","after","delayRef","idSuffix","concat","After","done","DoneState","eventObject","doneInvoke","DoneInvoke","error","ErrorPlatform","pure","getActions","Pure","get","forwardTo","target","escalate","errorData","choose","conds","Choose","resolveActions","machine","currentState","currentContext","preserveActionOrder","__read","partition","assignActions","otherActions","updatedContext","length","updateContext","preservedContexts","resolvedActions","flatten","sendAction","delays","IS_PRODUCTION","warn","chooseAction","matchedActions","find","condition","guard","toGuard","cond","guards","evaluateGuard","_b","toArray","resolvedActionsFromChoose","resolvedContextFromChoose","push","_c","resolvedActionsFromPure","resolvedContext","resolvedActionObject","exec_1","contextIndex_1","_ctx","args","_i","arguments","apply","__spreadArray","filter","a"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _tslib = require('./_virtual/_tslib.js');\nvar environment = require('./environment.js');\nvar utils = require('./utils.js');\nvar types = require('./types.js');\nvar actionTypes = require('./actionTypes.js');\n\nvar initEvent = /*#__PURE__*/utils.toSCXMLEvent({\n  type: actionTypes.init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (utils.isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (utils.isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = _tslib.__assign(_tslib.__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = utils.isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return _tslib.__assign(_tslib.__assign({\n    id: utils.isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\nfunction raise(event) {\n  if (!utils.isString(event)) {\n    return send(event, {\n      to: types.SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: actionTypes.raise,\n    event: event\n  };\n}\nfunction resolveRaise(action) {\n  return {\n    type: actionTypes.raise,\n    _event: utils.toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: actionTypes.send,\n    event: utils.isFunction(event) ? event : utils.toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : utils.isFunction(event) ? event.name : utils.getEventType(event)\n  };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = utils.toSCXMLEvent(utils.isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (utils.isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = utils.isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = utils.isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = utils.isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\nfunction sendParent(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\nfunction sendTo(actor, event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\nfunction sendUpdate() {\n  return sendParent(actionTypes.update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\nfunction respond(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: actionTypes.log,\n    label: label,\n    expr: expr\n  };\n}\nvar resolveLog = function (action, ctx, _event) {\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    value: utils.isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\nvar cancel = function (sendId) {\n  return {\n    type: actionTypes.cancel,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: types.ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\nfunction stop(actorRef) {\n  var activity = utils.isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: types.ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = utils.isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: types.ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\nvar assign = function (assignment) {\n  return {\n    type: actionTypes.assign,\n    assignment: assignment\n  };\n};\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(types.ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\nfunction done(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction error(id, data) {\n  var type = \"\".concat(types.ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction pure(getActions) {\n  return {\n    type: types.ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction forwardTo(target, options) {\n  return send(function (_, event) {\n    return event;\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: actionTypes.error,\n      data: utils.isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\nfunction choose(conds) {\n  return {\n    type: types.ActionTypes.Choose,\n    conds: conds\n  };\n}\nfunction resolveActions(machine, currentState, currentContext, _event, actions, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = _tslib.__read(preserveActionOrder ? [[], actions] : utils.partition(actions, function (action) {\n    return action.type === actionTypes.assign;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? utils.updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = utils.flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case actionTypes.raise:\n        return resolveRaise(actionObject);\n\n      case actionTypes.send:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!environment.IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          utils.warn(!utils.isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        return sendAction;\n\n      case actionTypes.log:\n        return resolveLog(actionObject, updatedContext, _event);\n\n      case actionTypes.choose:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = utils.toGuard(condition.cond, machine.options.guards);\n            return !guard || utils.evaluateGuard(machine, guard, updatedContext, _event, currentState);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(utils.toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case actionTypes.pure:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(utils.toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case actionTypes.stop:\n        {\n          return resolveStop(actionObject, updatedContext, _event);\n        }\n\n      case actionTypes.assign:\n        {\n          updatedContext = utils.updateContext(updatedContext, _event, [actionObject], currentState);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = _tslib.__assign(_tslib.__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, _tslib.__spreadArray([preservedContexts[contextIndex_1]], _tslib.__read(args), false));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexports.after = after;\nexports.assign = assign;\nexports.cancel = cancel;\nexports.choose = choose;\nexports.done = done;\nexports.doneInvoke = doneInvoke;\nexports.error = error;\nexports.escalate = escalate;\nexports.forwardTo = forwardTo;\nexports.getActionFunction = getActionFunction;\nexports.initEvent = initEvent;\nexports.log = log;\nexports.pure = pure;\nexports.raise = raise;\nexports.resolveActions = resolveActions;\nexports.resolveLog = resolveLog;\nexports.resolveRaise = resolveRaise;\nexports.resolveSend = resolveSend;\nexports.resolveStop = resolveStop;\nexports.respond = respond;\nexports.send = send;\nexports.sendParent = sendParent;\nexports.sendTo = sendTo;\nexports.sendUpdate = sendUpdate;\nexports.start = start;\nexports.stop = stop;\nexports.toActionObject = toActionObject;\nexports.toActionObjects = toActionObjects;\nexports.toActivityDefinition = toActivityDefinition;\n"]},"metadata":{},"sourceType":"script"}