{"ast":null,"code":"const eyeCorners = {\n  leftEar: 263,\n  rightEar: 33,\n  leftNose: 382,\n  rightNose: 155\n};\nconst lipChinLeft = 365;\nconst lipChinRight = 150;\nconst faceTop = 10;\nconst faceBottom = 152;\n\nconst dist = (p1, p2) => {\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n};\n\nconst avgPoints = (p1, p2) => {\n  return [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2];\n};\n\nexport const getDistance = prediction => {\n  const keypoints = prediction[0].scaledMesh;\n  /*\n  const x_avg =\n    keypoints.map((k) => k[0]).reduce((a, b) => a + b, 0) / keypoints.length;\n  const y_avg =\n    keypoints.map((k) => k[1]).reduce((a, b) => a + b, 0) / keypoints.length;\n  const center_point = [x_avg, y_avg];\n     let total = 0;\n  let n = 0;\n     keypoints.forEach((k) => {\n    n += 1;\n    total += dist(k, center_point);\n  });\n     return (n / total) * 100;\n  */\n\n  return 1000 / dist(avgPoints(keypoints[eyeCorners.leftEar], keypoints[eyeCorners.leftNose]), avgPoints(keypoints[eyeCorners.rightEar], keypoints[eyeCorners.rightNose]));\n};\nexport const averageAngles = measures => {\n  var x = 0;\n  var y = 0;\n  measures.forEach(msr => {\n    x += msr.x;\n    y += msr.y;\n  });\n  return {\n    x: x / measures.length,\n    y: y / measures.length\n  };\n};\nexport const overallXAngle = prediction => {\n  const {\n    xAngle,\n    yAngle\n  } = getAngle(prediction);\n  const coords = getEyeAngle(prediction[0]);\n  const xEyeAngle = (coords.leftIris.angleX + coords.rightIris.angleX) / 2 - 2;\n  const eyeScalar = 4;\n  console.log(\"xFaceAngle: \" + xAngle);\n  console.log(\"xEyeAngle: \" + xEyeAngle);\n  return xAngle + eyeScalar * xEyeAngle;\n};\nexport const overallYAngle = prediction => {\n  const {\n    xAngle,\n    yAngle\n  } = getAngle(prediction);\n  const coords = getEyeAngle(prediction[0]);\n  const width = (coords.leftEye.width + coords.rightEye.width) / 2;\n  const height = (coords.leftEye.height + coords.rightEye.height) / 2;\n  const yEyeAngle = (coords.leftIris.angleY + coords.rightIris.angleY) / 2 / (height / width);\n  const eyeScalar = 5;\n  console.log(\"xFaceAngle: \" + yAngle);\n  console.log(\"xEyeAngle: \" + yEyeAngle);\n  return yAngle;\n};\nexport const getAngle = prediction => {\n  const keypoints = prediction[0].scaledMesh;\n  const est1 = keypoints[eyeCorners.leftEar][2] - keypoints[eyeCorners.rightEar][2];\n  const est2 = keypoints[eyeCorners.leftNose][2] - keypoints[eyeCorners.rightNose][2];\n  const est3 = keypoints[lipChinLeft][2] - keypoints[lipChinRight][2];\n  const xAngle = 2 * (est1 + est2 + est3) / 3;\n  const yAngle = keypoints[faceTop][2] - keypoints[faceBottom][2] + 30;\n  return {\n    xAngle,\n    yAngle\n  };\n};\nconst irises = {\n  rightIris: [474, 475, 476, 477],\n  leftIris: [469, 470, 471, 472],\n  rightEye: [33, 7, 163, 144, 145, 153, 154, 155, 33, 246, 161, 160, 159, 158, 157, 173, 33],\n  leftEye: [263, 249, 390, 373, 374, 380, 381, 382, 263, 466, 388, 387, 386, 385, 384, 398, 263]\n};\nexport const getEyeAngle = prediction => {\n  const keypoints = prediction.scaledMesh;\n  const hFOV = 35;\n  const vFOV = 25;\n  var leftIrisX = 0;\n  var leftIrisY = 0;\n  var leftIrisZ = 0;\n  irises.leftIris.forEach(pt => {\n    leftIrisX += keypoints[pt][0];\n    leftIrisY += keypoints[pt][1];\n    leftIrisZ += keypoints[pt][2];\n  });\n  var rightIrisX = 0;\n  var rightIrisY = 0;\n  var rightIrisZ = 0;\n  irises.rightIris.forEach(pt => {\n    rightIrisX += keypoints[pt][0];\n    rightIrisY += keypoints[pt][1];\n    rightIrisZ += keypoints[pt][2];\n  });\n  var leftEyeMax = 0;\n  var leftEyeMin = 1000;\n  irises.leftEye.forEach(pt => {\n    if (keypoints[pt][1] > leftEyeMax) leftEyeMax = keypoints[pt][1];\n    if (keypoints[pt][1] < leftEyeMin) leftEyeMin = keypoints[pt][1];\n  });\n  var leftEye = {\n    x: (keypoints[eyeCorners.leftEar][0] + keypoints[eyeCorners.leftNose][0]) / 2,\n    y: leftEyeMin + (leftEyeMax - leftEyeMin) / 2,\n    z: (keypoints[eyeCorners.leftEar][2] + keypoints[eyeCorners.leftNose][2]) / 2,\n    width: Math.abs(keypoints[eyeCorners.leftEar][0] - keypoints[eyeCorners.leftNose][0]),\n    height: leftEyeMax - leftEyeMin\n  };\n  var rightEyeMax = 0;\n  var rightEyeMin = 1000;\n  irises.rightEye.forEach(pt => {\n    if (keypoints[pt][1] > rightEyeMax) rightEyeMax = keypoints[pt][1];\n    if (keypoints[pt][1] < rightEyeMin) rightEyeMin = keypoints[pt][1];\n  });\n  var rightEye = {\n    x: (keypoints[eyeCorners.rightEar][0] + keypoints[eyeCorners.rightNose][0]) / 2,\n    y: rightEyeMin + (rightEyeMax - rightEyeMin) / 2,\n    z: (keypoints[eyeCorners.rightEar][2] + keypoints[eyeCorners.rightNose][2]) / 2,\n    width: Math.abs(keypoints[eyeCorners.rightEar][0] - keypoints[eyeCorners.rightNose][0]),\n    height: rightEyeMax - rightEyeMin\n  };\n  const coords = {\n    leftIris: {\n      x: leftIrisX / 4,\n      y: leftIrisY / 4,\n      z: leftIrisZ / 4\n    },\n    rightIris: {\n      x: rightIrisX / 4,\n      y: rightIrisY / 4,\n      z: rightIrisZ / 4\n    },\n    leftEye,\n    rightEye\n  }; // left iris angle\n\n  const leftAngleX = (coords.leftIris.x - coords.leftEye.x) / (coords.leftEye.width / 2) * hFOV; //const leftAngleX = coords.leftIris.x-coords.leftEye.x\n\n  const leftAngleY = (coords.leftIris.y - coords.leftEye.y) / (coords.leftEye.height / 2) * vFOV;\n  coords.leftIris.angleX = leftAngleX;\n  coords.leftIris.angleY = leftAngleY; // right iris angle\n\n  const rightAngleX = (coords.rightIris.x - coords.rightEye.x) / (coords.rightEye.width / 2) * hFOV; //const rightAngleX = coords.rightIris.x-coords.rightEye.x\n\n  const rightAngleY = (coords.rightIris.y - coords.rightEye.y) / (coords.rightEye.height / 2) * vFOV;\n  coords.rightIris.angleX = rightAngleX;\n  coords.rightIris.angleY = rightAngleY;\n  return coords;\n};","map":{"version":3,"sources":["/Users/angelinadeo/thehacktrical/NYUhack/src/util/analyzePoints.js"],"names":["eyeCorners","leftEar","rightEar","leftNose","rightNose","lipChinLeft","lipChinRight","faceTop","faceBottom","dist","p1","p2","Math","sqrt","pow","avgPoints","getDistance","prediction","keypoints","scaledMesh","averageAngles","measures","x","y","forEach","msr","length","overallXAngle","xAngle","yAngle","getAngle","coords","getEyeAngle","xEyeAngle","leftIris","angleX","rightIris","eyeScalar","console","log","overallYAngle","width","leftEye","rightEye","height","yEyeAngle","angleY","est1","est2","est3","irises","hFOV","vFOV","leftIrisX","leftIrisY","leftIrisZ","pt","rightIrisX","rightIrisY","rightIrisZ","leftEyeMax","leftEyeMin","z","abs","rightEyeMax","rightEyeMin","leftAngleX","leftAngleY","rightAngleX","rightAngleY"],"mappings":"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","sourcesContent":["const eyeCorners = {\n    leftEar: 263,\n    rightEar: 33,\n    leftNose: 382,\n    rightNose: 155,\n  };\n  \n  const lipChinLeft = 365;\n  const lipChinRight = 150;\n  const faceTop = 10;\n  const faceBottom = 152;\n  \n  const dist = (p1, p2) => {\n    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n  };\n  \n  const avgPoints = (p1, p2) => {\n    return [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2];\n  };\n  \n  export const getDistance = (prediction) => {\n    const keypoints = prediction[0].scaledMesh;\n  \n    /*\n    const x_avg =\n      keypoints.map((k) => k[0]).reduce((a, b) => a + b, 0) / keypoints.length;\n    const y_avg =\n      keypoints.map((k) => k[1]).reduce((a, b) => a + b, 0) / keypoints.length;\n    const center_point = [x_avg, y_avg];\n  \n    let total = 0;\n    let n = 0;\n  \n    keypoints.forEach((k) => {\n      n += 1;\n      total += dist(k, center_point);\n    });\n  \n    return (n / total) * 100;\n    */\n  \n    return (\n      1000 /\n      dist(\n        avgPoints(keypoints[eyeCorners.leftEar], keypoints[eyeCorners.leftNose]),\n        avgPoints(keypoints[eyeCorners.rightEar], keypoints[eyeCorners.rightNose])\n      )\n    );\n  };\n  \n  export const averageAngles = (measures) => {\n    var x = 0;\n    var y = 0;\n    measures.forEach((msr) => {\n      x += msr.x;\n      y += msr.y;\n    });\n    return { x: x / measures.length, y: y / measures.length };\n  };\n  \n  export const overallXAngle = (prediction) => {\n    const { xAngle, yAngle } = getAngle(prediction);\n    const coords = getEyeAngle(prediction[0]);\n    const xEyeAngle = (coords.leftIris.angleX + coords.rightIris.angleX) / 2 - 2;\n    const eyeScalar = 4;\n  \n    console.log(\"xFaceAngle: \" + xAngle);\n    console.log(\"xEyeAngle: \" + xEyeAngle);\n  \n    return xAngle + eyeScalar * xEyeAngle;\n  };\n  \n  export const overallYAngle = (prediction) => {\n    const { xAngle, yAngle } = getAngle(prediction);\n    const coords = getEyeAngle(prediction[0]);\n    const width = (coords.leftEye.width + coords.rightEye.width) / 2;\n    const height = (coords.leftEye.height + coords.rightEye.height) / 2;\n    const yEyeAngle =\n      (coords.leftIris.angleY + coords.rightIris.angleY) / 2 / (height / width);\n    const eyeScalar = 5;\n  \n    console.log(\"xFaceAngle: \" + yAngle);\n    console.log(\"xEyeAngle: \" + yEyeAngle);\n  \n    return yAngle;\n  };\n  \n  export const getAngle = (prediction) => {\n    const keypoints = prediction[0].scaledMesh;\n  \n    const est1 =\n      keypoints[eyeCorners.leftEar][2] - keypoints[eyeCorners.rightEar][2];\n    const est2 =\n      keypoints[eyeCorners.leftNose][2] - keypoints[eyeCorners.rightNose][2];\n    const est3 = keypoints[lipChinLeft][2] - keypoints[lipChinRight][2];\n  \n    const xAngle = (2 * (est1 + est2 + est3)) / 3;\n    const yAngle = keypoints[faceTop][2] - keypoints[faceBottom][2] + 30;\n  \n    return { xAngle, yAngle };\n  };\n  \n  const irises = {\n    rightIris: [474, 475, 476, 477],\n    leftIris: [469, 470, 471, 472],\n    rightEye: [\n      33, 7, 163, 144, 145, 153, 154, 155, 33, 246, 161, 160, 159, 158, 157, 173,\n      33,\n    ],\n    leftEye: [\n      263, 249, 390, 373, 374, 380, 381, 382, 263, 466, 388, 387, 386, 385, 384,\n      398, 263,\n    ],\n  };\n  \n  export const getEyeAngle = (prediction) => {\n    const keypoints = prediction.scaledMesh;\n    const hFOV = 35;\n    const vFOV = 25;\n  \n    var leftIrisX = 0;\n    var leftIrisY = 0;\n    var leftIrisZ = 0;\n    irises.leftIris.forEach((pt) => {\n      leftIrisX += keypoints[pt][0];\n      leftIrisY += keypoints[pt][1];\n      leftIrisZ += keypoints[pt][2];\n    });\n  \n    var rightIrisX = 0;\n    var rightIrisY = 0;\n    var rightIrisZ = 0;\n    irises.rightIris.forEach((pt) => {\n      rightIrisX += keypoints[pt][0];\n      rightIrisY += keypoints[pt][1];\n      rightIrisZ += keypoints[pt][2];\n    });\n  \n    var leftEyeMax = 0;\n    var leftEyeMin = 1000;\n    irises.leftEye.forEach((pt) => {\n      if (keypoints[pt][1] > leftEyeMax) leftEyeMax = keypoints[pt][1];\n      if (keypoints[pt][1] < leftEyeMin) leftEyeMin = keypoints[pt][1];\n    });\n  \n    var leftEye = {\n      x:\n        (keypoints[eyeCorners.leftEar][0] + keypoints[eyeCorners.leftNose][0]) /\n        2,\n      y: leftEyeMin + (leftEyeMax - leftEyeMin) / 2,\n      z:\n        (keypoints[eyeCorners.leftEar][2] + keypoints[eyeCorners.leftNose][2]) /\n        2,\n      width: Math.abs(\n        keypoints[eyeCorners.leftEar][0] - keypoints[eyeCorners.leftNose][0]\n      ),\n      height: leftEyeMax - leftEyeMin,\n    };\n   \n    var rightEyeMax = 0;\n    var rightEyeMin = 1000;\n    irises.rightEye.forEach((pt) => {\n      if (keypoints[pt][1] > rightEyeMax) rightEyeMax = keypoints[pt][1];\n      if (keypoints[pt][1] < rightEyeMin) rightEyeMin = keypoints[pt][1];\n    });\n  \n    var rightEye = {\n      x:\n        (keypoints[eyeCorners.rightEar][0] + keypoints[eyeCorners.rightNose][0]) /\n        2,\n      y: rightEyeMin + (rightEyeMax - rightEyeMin) / 2,\n      z:\n        (keypoints[eyeCorners.rightEar][2] + keypoints[eyeCorners.rightNose][2]) /\n        2,\n      width: Math.abs(\n        keypoints[eyeCorners.rightEar][0] - keypoints[eyeCorners.rightNose][0]\n      ),\n      height: rightEyeMax - rightEyeMin,\n    };\n  \n    const coords = {\n      leftIris: { x: leftIrisX / 4, y: leftIrisY / 4, z: leftIrisZ / 4 },\n      rightIris: { x: rightIrisX / 4, y: rightIrisY / 4, z: rightIrisZ / 4 },\n      leftEye,\n      rightEye,\n    };\n  \n    // left iris angle\n    const leftAngleX =\n      ((coords.leftIris.x - coords.leftEye.x) / (coords.leftEye.width / 2)) *\n      hFOV;\n    //const leftAngleX = coords.leftIris.x-coords.leftEye.x\n    const leftAngleY =\n      ((coords.leftIris.y - coords.leftEye.y) / (coords.leftEye.height / 2)) *\n      vFOV;\n    coords.leftIris.angleX = leftAngleX;\n    coords.leftIris.angleY = leftAngleY;\n  \n    // right iris angle\n    const rightAngleX =\n      ((coords.rightIris.x - coords.rightEye.x) / (coords.rightEye.width / 2)) *\n      hFOV;\n    //const rightAngleX = coords.rightIris.x-coords.rightEye.x\n    const rightAngleY =\n      ((coords.rightIris.y - coords.rightEye.y) / (coords.rightEye.height / 2)) *\n      vFOV;\n    coords.rightIris.angleX = rightAngleX;\n    coords.rightIris.angleY = rightAngleY;\n  \n    return coords;\n  };\n  "]},"metadata":{},"sourceType":"module"}