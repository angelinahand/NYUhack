{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IDENTITY_MATRIX = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n/**\n * Normalizes the provided angle to the range -pi to pi.\n * @param angle The angle in radians to be normalized.\n */\n\nfunction normalizeRadians(angle) {\n  return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));\n}\n\nexports.normalizeRadians = normalizeRadians;\n/**\n * Computes the angle of rotation between two anchor points.\n * @param point1 First anchor point\n * @param point2 Second anchor point\n */\n\nfunction computeRotation(point1, point2) {\n  var radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);\n  return normalizeRadians(radians);\n}\n\nexports.computeRotation = computeRotation;\n\nfunction radToDegrees(rad) {\n  return rad * 180 / Math.PI;\n}\n\nexports.radToDegrees = radToDegrees;\n\nfunction buildTranslationMatrix(x, y) {\n  return [[1, 0, x], [0, 1, y], [0, 0, 1]];\n}\n\nfunction dot(v1, v2) {\n  var product = 0;\n\n  for (var i = 0; i < v1.length; i++) {\n    product += v1[i] * v2[i];\n  }\n\n  return product;\n}\n\nexports.dot = dot;\n\nfunction getColumnFrom2DArr(arr, columnIndex) {\n  var column = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    column.push(arr[i][columnIndex]);\n  }\n\n  return column;\n}\n\nexports.getColumnFrom2DArr = getColumnFrom2DArr;\n\nfunction multiplyTransformMatrices(mat1, mat2) {\n  var product = [];\n  var size = mat1.length;\n\n  for (var row = 0; row < size; row++) {\n    product.push([]);\n\n    for (var col = 0; col < size; col++) {\n      product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));\n    }\n  }\n\n  return product;\n}\n\nfunction buildRotationMatrix(rotation, center) {\n  var cosA = Math.cos(rotation);\n  var sinA = Math.sin(rotation);\n  var rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];\n  var translationMatrix = buildTranslationMatrix(center[0], center[1]);\n  var translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);\n  var negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);\n  return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);\n}\n\nexports.buildRotationMatrix = buildRotationMatrix;\n\nfunction invertTransformMatrix(matrix) {\n  var rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];\n  var translationComponent = [matrix[0][2], matrix[1][2]];\n  var invertedTranslation = [-dot(rotationComponent[0], translationComponent), -dot(rotationComponent[1], translationComponent)];\n  return [rotationComponent[0].concat(invertedTranslation[0]), rotationComponent[1].concat(invertedTranslation[1]), [0, 0, 1]];\n}\n\nexports.invertTransformMatrix = invertTransformMatrix;\n\nfunction rotatePoint(homogeneousCoordinate, rotationMatrix) {\n  return [dot(homogeneousCoordinate, rotationMatrix[0]), dot(homogeneousCoordinate, rotationMatrix[1])];\n}\n\nexports.rotatePoint = rotatePoint;\n\nfunction xyDistanceBetweenPoints(a, b) {\n  return Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));\n}\n\nexports.xyDistanceBetweenPoints = xyDistanceBetweenPoints;","map":{"version":3,"mappings":"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","names":["exports","normalizeRadians","angle","Math","PI","floor","computeRotation","point1","point2","radians","atan2","radToDegrees","rad","buildTranslationMatrix","x","y","dot","v1","v2","product","i","length","getColumnFrom2DArr","arr","columnIndex","column","push","multiplyTransformMatrices","mat1","mat2","size","row","col","buildRotationMatrix","rotation","center","cosA","cos","sinA","sin","rotationMatrix","translationMatrix","translationTimesRotation","negativeTranslationMatrix","invertTransformMatrix","matrix","rotationComponent","translationComponent","invertedTranslation","concat","rotatePoint","homogeneousCoordinate","xyDistanceBetweenPoints","a","b","sqrt","pow"],"sources":["../../src/mediapipe-facemesh/util.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}