{"ast":null,"code":"import { useLayoutEffect as e } from \"@radix-ui/react-use-layout-effect\";\nimport * as t from \"react\";\nlet n,\n    o = 0;\nexport function useBodyPointerEvents(_ref) {\n  let {\n    disabled: r\n  } = _ref;\n  const u = t.useRef(!1),\n        c = t.useRef(!1);\n  t.useEffect(() => {\n    const e = e => {\n      const t = \"mouse\" === e.pointerType;\n      u.current = !t, c.current = t && 0 === e.button;\n    },\n          t = () => {\n      u.current = !1, c.current = !1;\n    };\n\n    return document.addEventListener(\"pointerdown\", e), document.addEventListener(\"pointerup\", t), () => {\n      document.removeEventListener(\"pointerdown\", e), document.removeEventListener(\"pointerup\", t);\n    };\n  }, []), e(() => {\n    if (r) {\n      function e() {\n        o--, 0 === o && (document.body.style.pointerEvents = n);\n      }\n\n      return 0 === o && (n = document.body.style.pointerEvents), document.body.style.pointerEvents = \"none\", o++, () => {\n        u.current ? document.addEventListener(\"click\", e, {\n          once: !0\n        }) : c.current ? document.addEventListener(\"pointerup\", e, {\n          once: !0\n        }) : e();\n      };\n    }\n  }, [r]);\n}","map":{"version":3,"mappings":";;AAGA,IACIA,CADJ;AAAA,IAAIC,IAAc,CAAlB;AAAkB,OAGlB,SAASC,oBAAT,OAAgCC;AAAAA,MAAvBD;AAAqBC,cAAEA;AAAvBD,GAAuBC;AAC9B,QAAMC,IAAyBC,EAAMC,MAAND,CAAMC,CAAO,CAAbD,CAA/B;AAAA,QACME,IAAwBF,EAAMC,MAAND,CAAMC,CAAO,CAAbD,CAD9B;AAGAA,IAAMG,SAANH,CAAgB;AACd,UAAMI,IAAqBC;AACzB,YAAMC,IAAgC,YAAtBD,EAAME,WAAtB;AACAR,QAAuBS,OAAvBT,GAAuBS,CAAWF,CAAlCP,EACAG,EAAsBM,OAAtBN,GAAgCI,KAA4B,MAAjBD,EAAMI,MADjDV;AACiDU,KAHnD;AAAA,UAKMC,IAAkB;AACtBX,QAAuBS,OAAvBT,GAAuBS,CAAU,CAAjCT,EACAG,EAAsBM,OAAtBN,GAAsBM,CAAU,CADhCT;AACgC,KAPlC;;AAWA,WAFAY,SAASC,gBAATD,CAA0B,aAA1BA,EAAyCP,CAAzCO,GACAA,SAASC,gBAATD,CAA0B,WAA1BA,EAAuCD,CAAvCC,CADAA,EAEO;AACLA,eAASE,mBAATF,CAA6B,aAA7BA,EAA4CP,CAA5CO,GACAA,SAASE,mBAATF,CAA6B,WAA7BA,EAA0CD,CAA1CC,CADAA;AAC0CD,KAF5C;AAE4CA,GAd9CV,EAgBG,EAhBHA,GAkBAc,EAAgB;AACd,QAAIhB,CAAJ,EAAc;AAKZ,eAASiB,CAAT,GAASA;AACPnB,aACoB,MAAhBA,CAAgB,KAClBe,SAASK,IAATL,CAAcM,KAAdN,CAAoBO,aAApBP,GAAoChB,CADlB,CADpBC;AASF;;AAAA,aAdoB,MAAhBA,CAAgB,KAClBD,IAA4BgB,SAASK,IAATL,CAAcM,KAAdN,CAAoBO,aAD9B,GAWpBP,SAASK,IAATL,CAAcM,KAAdN,CAAoBO,aAApBP,GAAoC,MAXhB,EAYpBf,GAZoB,EAcb;AACDG,UAAuBS,OAAvBT,GAkBFY,SAASC,gBAATD,CAA0B,OAA1BA,EAAmCI,CAAnCJ,EAAuD;AAAEQ,iBAAM;AAAR,SAAvDR,CAlBEZ,GAmBOG,EAAsBM,OAAtBN,GAMTS,SAASC,gBAATD,CAA0B,WAA1BA,EAAuCI,CAAvCJ,EAA2D;AAAEQ,iBAAM;AAAR,SAA3DR,CANST,GAQTa,GA3BEhB;AA2BFgB,OA5BJ;AA4BIA;AAAAA,GA5CRD,EAgDG,CAAChB,CAAD,CAhDHgB,CAlBAd;AAkEIF","names":["originalBodyPointerEvents","changeCount","useBodyPointerEvents","disabled","isTouchOrPenPressedRef","React","useRef","isMouseLeftPressedRef","useEffect","handlePointerDown","event","isMouse","pointerType","current","button","handlePointerUp","document","addEventListener","removeEventListener","useLayoutEffect","resetPointerEvents","body","style","pointerEvents","once"],"sources":["/Users/angelinadeo/thehacktrical/NYUhack/node_modules/@radix-ui/react-use-body-pointer-events/dist/packages/react/use-body-pointer-events/src/useBodyPointerEvents.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\nlet changeCount = 0;\nlet originalBodyPointerEvents: string;\n\nfunction useBodyPointerEvents({ disabled }: { disabled: boolean }) {\n  const isTouchOrPenPressedRef = React.useRef(false);\n  const isMouseLeftPressedRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      const isMouse = event.pointerType === 'mouse';\n      isTouchOrPenPressedRef.current = !isMouse;\n      isMouseLeftPressedRef.current = isMouse && event.button === 0;\n    };\n    const handlePointerUp = () => {\n      isTouchOrPenPressedRef.current = false;\n      isMouseLeftPressedRef.current = false;\n    };\n    document.addEventListener('pointerdown', handlePointerDown);\n    document.addEventListener('pointerup', handlePointerUp);\n    return () => {\n      document.removeEventListener('pointerdown', handlePointerDown);\n      document.removeEventListener('pointerup', handlePointerUp);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (disabled) {\n      if (changeCount === 0) {\n        originalBodyPointerEvents = document.body.style.pointerEvents;\n      }\n\n      function resetPointerEvents() {\n        changeCount--;\n        if (changeCount === 0) {\n          document.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      }\n\n      document.body.style.pointerEvents = 'none';\n      changeCount++;\n\n      return () => {\n        if (isTouchOrPenPressedRef.current) {\n          /**\n           * We force pointer-events to remain disabled until `click` fires on touch devices\n           * because browsers implement a ~350ms delay between the time the user stops\n           * touching the display and when the browser executes events. We need to ensure we\n           * don't reactivate pointer-events within this timeframe otherwise the browser may\n           * execute events that should have been prevented.\n           *\n           * We are aware that `touch-action: manipulation` shortens this delay for events,\n           * but it isn't enough to cover all cases.\n           *\n           * When there is an input on screen:\n           * - if a click event is bound to it, it will fire after a `pointerdown` which may\n           * have re-enabled pointer-events (regardless of `touch-action: manipulation`).\n           * - if clicking it causes the page to zoom, the events will wait for the zoom to\n           * finish before executing on the input.\n           * - if long pressesing it, the events will execute after the longpress delay.\n           */\n          document.addEventListener('click', resetPointerEvents, { once: true });\n        } else if (isMouseLeftPressedRef.current) {\n          /**\n           * We force pointer-events to remain disabled until `pointerup` otherwise, events\n           * bound to inert controls could execute after pointer-events have been re-enabled,\n           * e.g. `select` event.\n           */\n          document.addEventListener('pointerup', resetPointerEvents, { once: true });\n        } else {\n          resetPointerEvents();\n        }\n      };\n    }\n  }, [disabled]);\n}\n\nexport { useBodyPointerEvents };\n"]},"metadata":{},"sourceType":"module"}