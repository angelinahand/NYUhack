{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport * as o from \"@radix-ui/react-collapsible\";\nimport { createCollapsibleScope as r } from \"@radix-ui/react-collapsible\";\nimport { Primitive as t } from \"@radix-ui/react-primitive\";\nimport { useControllableState as c } from \"@radix-ui/react-use-controllable-state\";\nimport { composeEventHandlers as n } from \"@radix-ui/primitive\";\nimport { useComposedRefs as i } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope as a } from \"@radix-ui/react-context\";\nimport d from \"react\";\nimport l from \"@babel/runtime/helpers/esm/extends\";\nconst s = [\"Home\", \"End\", \"ArrowDown\", \"ArrowUp\"],\n      [p, f] = a(\"Accordion\", [r]);\nexport { f as createAccordionScope };\nconst m = r();\nexport const Accordion = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    type: r,\n    ...t\n  } = e;\n\n  if (\"single\" === r) {\n    const e = t;\n    /*#__PURE__*/\n\n    return d.createElement(x, l({}, e, {\n      ref: o\n    }));\n  }\n\n  if (\"multiple\" === r) {\n    const e = t;\n    /*#__PURE__*/\n\n    return d.createElement(w, l({}, e, {\n      ref: o\n    }));\n  }\n\n  throw new Error(\"Missing prop `type` expected on `Accordion`\");\n});\n/*#__PURE__*/\n\nconst [u, g] = p(\"Accordion\"),\n      [A, b] = p(\"Accordion\", {\n  collapsible: !1\n}),\n      x = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    value: r,\n    defaultValue: t,\n    onValueChange: n = () => {},\n    collapsible: i = !1,\n    ...a\n  } = e,\n        [s, p] = c({\n    prop: r,\n    defaultProp: t,\n    onChange: n\n  });\n  /*#__PURE__*/\n\n  return d.createElement(u, {\n    scope: e.__scopeAccordion,\n    value: s ? [s] : [],\n    onItemOpen: p,\n    onItemClose: d.useCallback(() => i && p(\"\"), [i, p])\n  }, /*#__PURE__*/d.createElement(A, {\n    scope: e.__scopeAccordion,\n    collapsible: i\n  }, /*#__PURE__*/d.createElement(_, l({}, a, {\n    ref: o\n  }))));\n}),\n      w = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    value: r,\n    defaultValue: t,\n    onValueChange: n = () => {},\n    ...i\n  } = e,\n        [a = [], s] = c({\n    prop: r,\n    defaultProp: t,\n    onChange: n\n  }),\n        p = d.useCallback(e => s(function () {\n    let o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [...o, e];\n  }), [s]),\n        f = d.useCallback(e => s(function () {\n    let o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return o.filter(o => o !== e);\n  }), [s]);\n  /*#__PURE__*/\n\n  return d.createElement(u, {\n    scope: e.__scopeAccordion,\n    value: a,\n    onItemOpen: p,\n    onItemClose: f\n  }, /*#__PURE__*/d.createElement(A, {\n    scope: e.__scopeAccordion,\n    collapsible: !0\n  }, /*#__PURE__*/d.createElement(_, l({}, i, {\n    ref: o\n  }))));\n}),\n      [E, v] = p(\"Accordion\"),\n      _ = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    __scopeAccordion: r,\n    disabled: c,\n    ...a\n  } = e,\n        p = d.useRef(new Set()),\n        f = d.useRef(null),\n        m = i(f, o),\n        u = n(e.onKeyDown, e => {\n    var o;\n    const r = e.target;\n    if (!(s.includes(e.key) && (t = r, t instanceof HTMLButtonElement))) return;\n    var t;\n    const c = [...p.current].filter(e => !(null != e && e.disabled)),\n          n = c.length,\n          i = c.indexOf(r);\n    if (-1 === i) return;\n    e.preventDefault();\n    let a = i;\n\n    switch (e.key) {\n      case \"Home\":\n        a = 0;\n        break;\n\n      case \"End\":\n        a = n - 1;\n        break;\n\n      case \"ArrowDown\":\n        a = i + 1;\n        break;\n\n      case \"ArrowUp\":\n        a = i - 1, a < 0 && (a = n - 1);\n    }\n\n    null === (o = c[a % n]) || void 0 === o || o.focus();\n  });\n  /*#__PURE__*/\n\n  return d.createElement(E, {\n    scope: r,\n    triggerNodesRef: p,\n    disabled: c\n  }, /*#__PURE__*/d.createElement(t.div, l({}, a, {\n    ref: m,\n    onKeyDown: c ? void 0 : u\n  })));\n}),\n      [h, C] = p(\"AccordionItem\");\n\nexport const AccordionItem = /*#__PURE__*/d.forwardRef((r, t) => {\n  const {\n    __scopeAccordion: c,\n    value: n,\n    ...i\n  } = r,\n        a = v(\"AccordionItem\", c),\n        s = g(\"AccordionItem\", c),\n        p = m(c),\n        f = e(),\n        u = n && s.value.includes(n) || !1,\n        A = a.disabled || r.disabled;\n  /*#__PURE__*/\n\n  return d.createElement(h, {\n    scope: c,\n    open: u,\n    disabled: A,\n    triggerId: f\n  }, /*#__PURE__*/d.createElement(o.Root, l({\n    \"data-state\": u ? \"open\" : \"closed\"\n  }, p, i, {\n    ref: t,\n    disabled: A,\n    open: u,\n    onOpenChange: e => {\n      e ? s.onItemOpen(n) : s.onItemClose(n);\n    }\n  })));\n});\n/*#__PURE__*/\n\nexport const AccordionHeader = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    __scopeAccordion: r,\n    ...c\n  } = e,\n        n = C(\"AccordionHeader\", r);\n  /*#__PURE__*/\n\n  return d.createElement(t.h3, l({\n    \"data-state\": (i = n.open, i ? \"open\" : \"closed\"),\n    \"data-disabled\": n.disabled ? \"\" : void 0\n  }, c, {\n    ref: o\n  }));\n  var i;\n});\n/*#__PURE__*/\n\nexport const AccordionTrigger = /*#__PURE__*/d.forwardRef((e, r) => {\n  const {\n    __scopeAccordion: t,\n    ...c\n  } = e,\n        {\n    triggerNodesRef: n\n  } = v(\"AccordionTrigger\", t),\n        a = C(\"AccordionTrigger\", t),\n        s = b(\"AccordionTrigger\", t),\n        p = m(t),\n        f = d.useRef(null),\n        u = i(f, r);\n  return d.useEffect(() => {\n    const e = n.current,\n          o = f.current;\n    if (o) return e.add(o), () => {\n      e.delete(o);\n    };\n  }, [n]), /*#__PURE__*/d.createElement(o.Trigger, l({\n    \"aria-disabled\": a.open && !s.collapsible || void 0,\n    id: a.triggerId\n  }, p, c, {\n    ref: u\n  }));\n});\n/*#__PURE__*/\n\nexport const AccordionContent = /*#__PURE__*/d.forwardRef((e, r) => {\n  const {\n    __scopeAccordion: t,\n    ...c\n  } = e,\n        n = C(\"AccordionContent\", t),\n        i = m(t);\n  /*#__PURE__*/\n\n  return d.createElement(o.Content, l({\n    role: \"region\",\n    \"aria-labelledby\": n.triggerId\n  }, i, c, {\n    ref: r,\n    style: {\n      \"--radix-accordion-content-height\": \"var(--radix-collapsible-content-height)\",\n      \"--radix-accordion-content-width\": \"var(--radix-collapsible-content-width)\",\n      ...e.style\n    }\n  }));\n});\n/*#__PURE__*/\n\nexport const Root = Accordion;\nexport const Item = AccordionItem;\nexport const Header = AccordionHeader;\nexport const Trigger = AccordionTrigger;\nexport const Content = AccordionContent;","map":{"version":3,"mappings":"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","names":["ACCORDION_KEYS","createAccordionContext","createAccordionScope","createContextScope","createCollapsibleScope","useCollapsibleScope","Accordion","React","forwardRef","props","forwardedRef","type","accordionProps","singleProps","_react","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplSingle","_babelRuntimeHelpersEsmExtends","ref","multipleProps","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplMultiple","Error","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","AccordionImplSingle","value","valueProp","defaultValue","onValueChange","accordionSingleProps","setValue","useControllableState","prop","defaultProp","onChange","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionValueProvider","scope","__scopeAccordion","onItemOpen","onItemClose","useCallback","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionCollapsibleProvider","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImpl","AccordionImplMultiple","accordionMultipleProps","handleItemOpen","itemValue","prevValue","handleItemClose","filter","AccordionImplProvider","useAccordionContext","AccordionImpl","disabled","triggerNodesRef","useRef","Set","accordionRef","composedRefs","useComposedRefs","handleKeyDown","composeEventHandlers","onKeyDown","event","target","includes","key","element","HTMLButtonElement","triggerNodes","current","node","triggerCount","length","triggerIndex","indexOf","preventDefault","nextIndex","_triggerNodes$clamped","focus","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplProvider","Primitive","div","undefined","AccordionItemProvider","useAccordionItemContext","AccordionItem","accordionItemProps","accordionContext","valueContext","collapsibleScope","triggerId","useId","open","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionItemProvider","_radixUiReactCollapsible","Root","onOpenChange","AccordionHeader","headerProps","itemContext","h3","AccordionTrigger","triggerProps","collapsibleContext","useEffect","triggerNode","add","delete","Trigger","id","AccordionContent","contentProps","Content","role","style","Item","Header"],"sources":["/Users/angelinadeo/thehacktrical/NYUhack/node_modules/@radix-ui/react-accordion/dist/packages/react/accordion/src/Accordion.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp'];\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n\n    if (type === 'single') {\n      const singleProps = accordionProps as AccordionImplSingleProps;\n      return <AccordionImplSingle {...singleProps} ref={forwardedRef} />;\n    }\n\n    if (type === 'multiple') {\n      const multipleProps = accordionProps as AccordionImplMultipleProps;\n      return <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />;\n    }\n\n    throw new Error(`Missing prop \\`type\\` expected on \\`${ACCORDION_NAME}\\``);\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  triggerNodesRef: React.MutableRefObject<Set<HTMLElement | null>>;\n  disabled?: boolean;\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, ...accordionProps } = props;\n    const triggerNodesRef = React.useRef<Set<AccordionTriggerElement>>(new Set());\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      const target = event.target as HTMLElement;\n      const isAccordionKey = ACCORDION_KEYS.includes(event.key);\n\n      if (!isAccordionKey || !isButton(target)) {\n        return;\n      }\n\n      const triggerNodes = [...triggerNodesRef.current].filter((node) => !node?.disabled);\n      const triggerCount = triggerNodes.length;\n      const triggerIndex = triggerNodes.indexOf(target);\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      switch (event.key) {\n        case 'Home':\n          nextIndex = 0;\n          break;\n        case 'End':\n          nextIndex = triggerCount - 1;\n          break;\n        case 'ArrowDown':\n          nextIndex = triggerIndex + 1;\n          break;\n        case 'ArrowUp':\n          nextIndex = triggerIndex - 1;\n          if (nextIndex < 0) {\n            nextIndex = triggerCount - 1;\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerNodes[clampedIndex]?.focus();\n    });\n\n    return (\n      <AccordionImplProvider\n        scope={__scopeAccordion}\n        triggerNodesRef={triggerNodesRef}\n        disabled={disabled}\n      >\n        <Primitive.div\n          {...accordionProps}\n          ref={composedRefs}\n          onKeyDown={disabled ? undefined : handleKeyDown}\n        />\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-state={open ? 'open' : 'closed'}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const { triggerNodesRef } = useAccordionContext(TRIGGER_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const ref = React.useRef<AccordionTriggerElement>(null);\n    const composedRefs = useComposedRefs(ref, forwardedRef);\n\n    React.useEffect(() => {\n      const triggerNodes = triggerNodesRef.current;\n      const triggerNode = ref.current;\n\n      if (triggerNode) {\n        triggerNodes.add(triggerNode);\n        return () => {\n          triggerNodes.delete(triggerNode);\n        };\n      }\n      return;\n    }, [triggerNodesRef]);\n\n    return (\n      <CollapsiblePrimitive.Trigger\n        aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n        id={itemContext.triggerId}\n        {...collapsibleScope}\n        {...triggerProps}\n        ref={composedRefs}\n      />\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction isButton(element: HTMLElement): element is HTMLButtonElement {\n  return element instanceof HTMLButtonElement;\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"]},"metadata":{},"sourceType":"module"}